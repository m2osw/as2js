// function
//
use extended_operators;

extern const sx: String;
extern const sy: String;
extern const z: Integer;
extern const w: Integer;

extern var r_charat_sx_z: String;
extern var r_charat_sy_z: String;
extern var r_charat_sx_w: String;
extern var r_charat_sy_w: String;

extern var r_charcodeat_sx_z: Integer;
extern var r_charcodeat_sy_z: Integer;
extern var r_charcodeat_sx_w: Integer;
extern var r_charcodeat_sy_w: Integer;

extern var r_tostring_sx: String;
extern var r_tostring_sy: String;

extern var r_valueof_sx: String;
extern var r_valueof_sy: String;

extern var r_concat_long: String;
extern var r_concat_small: String;

extern var r_indexof_test: Integer;
extern var r_indexof_test_from_z: Integer;
extern var r_indexof_test_from_29: Integer;
extern var r_indexof_l: Integer;
extern var r_indexof_undefined: Integer;

extern var r_lastindexof_test: Integer;
extern var r_lastindexof_test_from_z: Integer;
extern var r_lastindexof_test_from_29: Integer;
extern var r_lastindexof_l: Integer;
extern var r_lastindexof_undefined: Integer;

extern var r_replace_test: String;
extern var r_replace_prepend: String;
extern var r_replace_repeat: String;
extern var r_replace_dollar_dollar: String;
extern var r_replace_separators: String;
extern var r_replace_keep: String;
extern var r_replace_dollar_one: String;
extern var r_replace_group: String;

extern var r_replace_all_spaces: String;
extern var r_replace_all_spaces_spying: String;

r_charat_sy_z := sy.charAt(z);
r_charat_sx_w := sx.charAt(w);
r_charat_sy_w := sy.charAt(w);

r_charcodeat_sx_z := sx.charCodeAt(z);
r_charcodeat_sy_z := sy.charCodeAt(z);
r_charcodeat_sx_w := sx.charCodeAt(w);
r_charcodeat_sy_w := sy.charCodeAt(w);

r_tostring_sx := sx.toString();
r_tostring_sy := sy.toString();

r_valueof_sx := sx.valueOf();
r_valueof_sy := sy.valueOf();

r_concat_long := sx.concat(" middle ", sy, " end");
r_concat_small := sy.concat("!");

r_indexof_test := sx.indexOf("test");
r_indexof_test_from_z := sx.indexOf("test", z);
r_indexof_test_from_29 := sx.indexOf("test", 29);
r_indexof_l := sx.indexOf("l");
r_indexof_undefined := sx.indexOf("undefined");

r_lastindexof_test := sx.lastIndexOf("test");
r_lastindexof_test_from_z := sx.lastIndexOf("test", z);
r_lastindexof_test_from_29 := sx.lastIndexOf("test", 29);
r_lastindexof_l := sx.lastIndexOf("l");
r_lastindexof_undefined := sx.lastIndexOf("undefined");

r_replace_test := sx.replace("test", "color");
r_replace_prepend := sy.replace("", "before ");
r_replace_repeat := sy.replace(" ", " $` $' ");
r_replace_dollar_dollar := sy.replace(" ", " $$ ");
r_replace_separators := sy.replace(" ", "$ separators $");
r_replace_keep := sy.replace("spy", "great $&");
r_replace_dollar_one := sy.replace("spy", "$1 as is");
r_replace_group := sy.replace("spy", "$<group> as is");

r_replace_all_spaces := sx.replaceAll(" ", "_");
r_replace_all_spaces_spying := sy.replaceAll(" ", "_");

// last returns the (result)
r_charat_sx_z := sx.charAt(z);
