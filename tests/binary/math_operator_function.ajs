// function
//
use extended_operators;

extern const x: Double;
extern const y: Double;
extern const z: Integer;

extern var r_e: Double;
extern var r_ln10: Double;
extern var r_ln2: Double;
extern var r_log2e: Double;
extern var r_log10e: Double;
extern var r_pi: Double;
extern var r_sqrt1_2: Double;
extern var r_sqrt2: Double;

extern var r_abs_floating_point: Double;
extern var r_abs_integer: Integer;
extern var r_abs_x: Double;
extern var r_abs_y: Double;
extern var r_abs_z: Integer;

extern var r_min_floating_point_empty: Double;
extern var r_min_floating_point_one: Double;
extern var r_min_floating_point_two: Double;
extern var r_min_floating_point_four: Double;
extern var r_min_floating_point_mix1: Double;
extern var r_min_floating_point_mix2: Double;
extern var r_min_floating_point_mix3: Double;

extern var r_max_floating_point_empty: Double;
extern var r_max_floating_point_one: Double;
extern var r_max_floating_point_two: Double;
extern var r_max_floating_point_four: Double;
extern var r_max_floating_point_mix1: Double;
extern var r_max_floating_point_mix2: Double;
extern var r_max_floating_point_mix3: Double;

extern var r_min_integer_one: Integer;
extern var r_min_integer_two: Integer;
extern var r_min_integer_four: Integer;

extern var r_max_integer_one: Integer;
extern var r_max_integer_two: Integer;
extern var r_max_integer_four: Integer;

extern var r_imul_x_y: Double;

extern var r_pow_floating_points: Double;
extern var r_pow_integers: Integer;

extern var r_sign_x: Double;
extern var r_sign_y: Double;
extern var r_sign_z: Integer;
extern var r_sign_positive: Double;
extern var r_sign_negative: Double;
extern var r_sign_positive_zero: Double;
extern var r_sign_negative_zero: Double;
extern var r_sign_positive_infinity: Double;
extern var r_sign_negative_infinity: Double;
extern var r_sign_positive_nan: Double;
extern var r_sign_negative_nan: Double;
extern var r_sign_positive_integer: Integer;
extern var r_sign_zero_integer: Integer;
extern var r_sign_negative_integer: Integer;

extern var r_random: Double;

extern var r_acos_x: Double;
extern var r_acos_y: Double;
extern var r_acos_z: Double;

extern var r_acosh_x: Double;
extern var r_acosh_y: Double;
extern var r_acosh_z: Double;

extern var r_asin_x: Double;
extern var r_asin_y: Double;
extern var r_asin_z: Double;

extern var r_asinh_x: Double;
extern var r_asinh_y: Double;
extern var r_asinh_z: Double;

extern var r_atan_x: Double;
extern var r_atan_y: Double;
extern var r_atan_z: Double;

extern var r_atan2_x_y: Double;
extern var r_atan2_y_x: Double;

extern var r_atanh_x: Double;
extern var r_atanh_y: Double;
extern var r_atanh_z: Double;

extern var r_cbrt_x: Double;
extern var r_cbrt_y: Double;
extern var r_cbrt_z: Double;

extern var r_ceil_x: Double;
extern var r_ceil_y: Double;
extern var r_ceil_z: Double;

extern var r_cos_x: Double;
extern var r_cos_y: Double;
extern var r_cos_z: Double;

extern var r_cosh_x: Double;
extern var r_cosh_y: Double;
extern var r_cosh_z: Double;

extern var r_exp_x: Double;
extern var r_exp_y: Double;
extern var r_exp_z: Double;

extern var r_expm1_x: Double;
extern var r_expm1_y: Double;
extern var r_expm1_z: Double;

extern var r_floor_x: Double;
extern var r_floor_y: Double;
extern var r_floor_z: Double;

extern var r_fround_x: Double;
extern var r_fround_y: Double;
extern var r_fround_z: Double;

extern var r_log_x: Double;
extern var r_log_y: Double;
extern var r_log_z: Double;

extern var r_log1p_x: Double;
extern var r_log1p_y: Double;
extern var r_log1p_z: Double;

extern var r_log10_x: Double;
extern var r_log10_y: Double;
extern var r_log10_z: Double;

extern var r_log2_x: Double;
extern var r_log2_y: Double;
extern var r_log2_z: Double;

extern var r_round_x: Double;
extern var r_round_y: Double;
extern var r_round_z: Double;

extern var r_sin_x: Double;
extern var r_sin_y: Double;
extern var r_sin_z: Double;

extern var r_sinh_x: Double;
extern var r_sinh_y: Double;
extern var r_sinh_z: Double;

extern var r_sqrt_x: Double;
extern var r_sqrt_y: Double;
extern var r_sqrt_z: Double;

extern var r_tan_x: Double;
extern var r_tan_y: Double;
extern var r_tan_z: Double;

extern var r_tanh_x: Double;
extern var r_tanh_y: Double;
extern var r_tanh_z: Double;

extern var r_trunc_x: Double;
extern var r_trunc_y: Double;
extern var r_trunc_z: Double;

r_ln10 := Math.LN10;
r_ln2 := Math.LN2;
r_log2e := Math.LOG2E;
r_log10e := Math.LOG10E;
r_pi := Math.PI;
r_sqrt1_2 := Math.SQRT1_2;
r_sqrt2 := Math.SQRT2;

// some special cases where integers do not always get transformed to numbers
//
r_abs_floating_point := Math.abs(-56.3);
r_abs_integer := Math.abs(-13);
r_abs_x := Math.abs(x);
r_abs_y := Math.abs(y);
r_abs_z := Math.abs(z);

r_min_floating_point_empty := Math.min();
r_min_floating_point_one := Math.min(31.07);
r_min_floating_point_two := Math.min(x, y);
r_min_floating_point_four := Math.min(x, 31.07, y, -9.004);
r_min_floating_point_mix1 := Math.min(5, x, 31.07, y, -9.004, z, 100.3);
r_min_floating_point_mix2 := Math.min(5, 31.07);
r_min_floating_point_mix3 := Math.min(31.07, 5);

r_max_floating_point_empty := Math.max();
r_max_floating_point_one := Math.max(31.07);
r_max_floating_point_two := Math.max(x, y);
r_max_floating_point_four := Math.max(x, 31.07, y, -9.004);
r_max_floating_point_mix1 := Math.max(5, x, 31.07, y, -9.004, z, 100.3);
r_max_floating_point_mix2 := Math.max(5.3, x, 31.07, y, 9004, z, 100.3);
r_max_floating_point_mix3 := Math.max(-15013.35, -9004, z, -7777, -31431.07);

r_min_integer_one := Math.min(z);
r_min_integer_two := Math.min(34, z);
r_min_integer_four := Math.min(-10000, z, 55000, 333);

r_max_integer_one := Math.max(z);
r_max_integer_two := Math.max(34, z);
r_max_integer_four := Math.max(-10000, z, 55000, 333);

r_imul_x_y := Math.imul(x, y);

r_pow_floating_points := Math.pow(3.45, 12.081);
r_pow_integers := Math.pow(2, 34);

r_sign_x := Math.sign(x);
r_sign_y := Math.sign(y);
r_sign_z := Math.sign(z);
r_sign_positive := Math.sign(33.45);
r_sign_negative := Math.sign(-45.33);
r_sign_positive_zero := Math.sign(+0.0);
r_sign_negative_zero := Math.sign(-0.0);
r_sign_positive_infinity := Math.sign(+Infinity);
r_sign_negative_infinity := Math.sign(-Infinity);
r_sign_positive_nan := Math.sign(+NaN);
r_sign_negative_nan := Math.sign(-NaN);
r_sign_positive_integer := Math.sign(+3);
r_sign_zero_integer := Math.sign(0);
r_sign_negative_integer := Math.sign(-5);

// standard math functions with 0, 1, 2, or more parameters
//
r_random := Math.random();

r_acos_x := Math.acos(x);
r_acos_y := Math.acos(y);
r_acos_z := Math.acos(z);

r_acosh_x := Math.acosh(x);
r_acosh_y := Math.acosh(y);
r_acosh_z := Math.acosh(z);

r_asin_x := Math.asin(x);
r_asin_y := Math.asin(y);
r_asin_z := Math.asin(z);

r_asinh_x := Math.asinh(x);
r_asinh_y := Math.asinh(y);
r_asinh_z := Math.asinh(z);

r_atan_x := Math.atan(x);
r_atan_y := Math.atan(y);
r_atan_z := Math.atan(z);

r_atan2_x_y := Math.atan2(x, y);
r_atan2_y_x := Math.atan2(y, x);

r_atanh_x := Math.atanh(x);
r_atanh_y := Math.atanh(y);
r_atanh_z := Math.atanh(z);

r_cbrt_x := Math.cbrt(x);
r_cbrt_y := Math.cbrt(y);
r_cbrt_z := Math.cbrt(z);

r_ceil_x := Math.ceil(x);
r_ceil_y := Math.ceil(y);
r_ceil_z := Math.ceil(z);

r_cos_x := Math.cos(x);
r_cos_y := Math.cos(y);
r_cos_z := Math.cos(z);

r_cosh_x := Math.cosh(x);
r_cosh_y := Math.cosh(y);
r_cosh_z := Math.cosh(z);

r_exp_x := Math.exp(x);
r_exp_y := Math.exp(y);
r_exp_z := Math.exp(z);

r_expm1_x := Math.expm1(x);
r_expm1_y := Math.expm1(y);
r_expm1_z := Math.expm1(z);

r_floor_x := Math.floor(x);
r_floor_y := Math.floor(y);
r_floor_z := Math.floor(z);

r_fround_x := Math.fround(x);
r_fround_y := Math.fround(y);
r_fround_z := Math.fround(z);

r_log_x := Math.log(x);
r_log_y := Math.log(y);
r_log_z := Math.log(z);

r_log1p_x := Math.log1p(x);
r_log1p_y := Math.log1p(y);
r_log1p_z := Math.log1p(z);

r_log10_x := Math.log10(x);
r_log10_y := Math.log10(y);
r_log10_z := Math.log10(z);

r_log2_x := Math.log2(x);
r_log2_y := Math.log2(y);
r_log2_z := Math.log2(z);

r_round_x := Math.round(x);
r_round_y := Math.round(y);
r_round_z := Math.round(z);

r_sin_x := Math.sin(x);
r_sin_y := Math.sin(y);
r_sin_z := Math.sin(z);

r_sinh_x := Math.sinh(x);
r_sinh_y := Math.sinh(y);
r_sinh_z := Math.sinh(z);

r_sqrt_x := Math.sqrt(x);
r_sqrt_y := Math.sqrt(y);
r_sqrt_z := Math.sqrt(z);

r_tan_x := Math.tan(x);
r_tan_y := Math.tan(y);
r_tan_z := Math.tan(z);

r_tanh_x := Math.tanh(x);
r_tanh_y := Math.tanh(y);
r_tanh_z := Math.tanh(z);

r_trunc_x := Math.trunc(x);
r_trunc_y := Math.trunc(y);
r_trunc_z := Math.trunc(z);

// last returns the (result)
r_e := Math.E;
