// start
[
 
    // Test all the pragmas in one go with all possible data
    {
        //"verbose": true,
        "name": "verify all the pragma names",
        "program": "use allow_with, no_allow_with(),\n\
binary(true), no_binary(false),\n\
coverage(\"a\"), no_coverage(\"b\"),\n\
debug(444), no_debug(-4444),\n\
extended_escape_sequences(44.4), no_extended_escape_sequences(-44.44),\n\
extended_operators, no_extended_operators(),\n\
extended_statements(true), no_extended_statements(false),\n\
octal(\"a\"), no_octal(\"b\"),\n\
strict(444), no_strict(-4444),\n\
trace(44.4), no_trace(-44.44),\n\
trace_to_object(1), no_trace_to_object(0),\n\
unsafe_math(444), no_strict(-4444);\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INCOMPATIBLE_PRAGMA_ARGUMENT",
                "line #": 3,
                "message": "incompatible pragma argument."
            },
            {
                "message level": 2,
                "error code": "INCOMPATIBLE_PRAGMA_ARGUMENT",
                "line #": 3,
                "message": "incompatible pragma argument."
            },
            {
                "message level": 2,
                "error code": "INCOMPATIBLE_PRAGMA_ARGUMENT",
                "line #": 8,
                "message": "incompatible pragma argument."
            },
            {
                "message level": 2,
                "error code": "INCOMPATIBLE_PRAGMA_ARGUMENT",
                "line #": 8,
                "message": "incompatible pragma argument."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST"
                }
            ]
        }
    },

    //// Test all pragmas with 0 and 1 and '?'
    ////
    //// WARNING: I use ONE option per line for a good reason:
    ////          that way the verification really tests that
    ////          one pragma and not any other (putting all
    ////          5 pragma combinations on the same line would not prove
    ////          much, only that a certain number of errors occur!)
    ////
    //// TODO: add the extended_statements(2)/(3) tests
    //{
    //    //"verbose": true,
    //    "name": "verify all the pragma 'prima' tests",
    //    "program": "use\n\
    //allow_with?,\n\
    //allow_with()?,\n\
    //allow_with(0)?,\n\
    //allow_with(1)?,\n\
    //no_allow_with()?,\n\
    //no_allow_with(0)?,\n\
    //no_allow_with(1)?,\n\
    //extended_operators?,\n\
    //extended_operators()?,\n\
    //extended_operators(0)?,\n\
    //extended_operators(1)?,\n\
    //extended_operators(2)?,\n\
    //extended_operators(3)?,\n\
    //no_extended_operators()?,\n\
    //no_extended_operators(0)?,\n\
    //no_extended_operators(1)?,\n\
    //no_extended_operators(2)?,\n\
    //no_extended_operators(3)?;\n\
    //",
    //    "expected messages": [
    //        // Allow With
    //        {
    //            "options": "allow_with",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 2,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "allow_with",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 3,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_allow_with",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 4,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "allow_with",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 5,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_allow_with",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 6,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_allow_with",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 7,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "allow_with",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 8,
    //            "message": "prima pragma failed."
    //        },
    //        // Extended Operators
    //        {
    //            "options": "extended_operators,no_extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 9,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "extended_operators,no_extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 10,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_extended_operators,no_extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 11,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "extended_operators,no_extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 12,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_extended_operators,extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 13,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "extended_operators,extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 14,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_extended_operators,no_extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 15,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_extended_operators,no_extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 16,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "extended_operators,no_extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 17,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "no_extended_operators,extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 18,
    //            "message": "prima pragma failed."
    //        },
    //        {
    //            "options": "extended_operators,extended_operators_safe",
    //            "message level": 2,
    //            "error code": "PRAGMA_FAILED",
    //            "line #": 19,
    //            "message": "prima pragma failed."
    //        }
    //    ],
    //    "result": {
    //        "node type": "PROGRAM",
    //        "children": [
    //            {
    //                "node type": "DIRECTIVE_LIST"
    //            }
    //        ]
    //    }
    //},

    // Test all pragmas with 0 and 1 and '?'
    //
    // WARNING: I use ONE option per line for a good reason:
    //          that way the verification really tests that
    //          one pragma and not any other (putting all
    //          5 pragma combinations on the same line would not prove
    //          much, only that a certain number of errors occur!)
    {
        //"verbose": true,
        "slow": true,
        "name": "verify all the pragma 'prima' tests",
        "program": "use\n\
    allow_with?,\n\
    allow_with()?,\n\
    allow_with(0)?,\n\
    allow_with(1)?,\n\
    no_allow_with()?,\n\
    no_allow_with(0)?,\n\
    no_allow_with(1)?,\n\
    binary?,\n\
    binary()?,\n\
    binary(0)?,\n\
    binary(1)?,\n\
    no_binary()?,\n\
    no_binary(0)?,\n\
    no_binary(1)?,\n\
    coverage?,\n\
    coverage()?,\n\
    coverage(0)?,\n\
    coverage(1)?,\n\
    no_coverage()?,\n\
    no_coverage(0)?,\n\
    no_coverage(1)?,\n\
    debug?,\n\
    debug()?,\n\
    debug(0)?,\n\
    debug(1)?,\n\
    no_debug()?,\n\
    no_debug(0)?,\n\
    no_debug(1)?,\n\
    extended_escape_sequences?,\n\
    extended_escape_sequences()?,\n\
    extended_escape_sequences(0)?,\n\
    extended_escape_sequences(1)?,\n\
    no_extended_escape_sequences()?,\n\
    no_extended_escape_sequences(0)?,\n\
    no_extended_escape_sequences(1)?,\n\
    extended_operators?,\n\
    extended_operators()?,\n\
    extended_operators(0)?,\n\
    extended_operators(1)?,\n\
    extended_operators(2)?,\n\
    extended_operators(3)?,\n\
    no_extended_operators()?,\n\
    no_extended_operators(0)?,\n\
    no_extended_operators(1)?,\n\
    no_extended_operators(2)?,\n\
    no_extended_operators(3)?,\n\
    extended_statements?,\n\
    extended_statements()?,\n\
    extended_statements(0)?,\n\
    extended_statements(1)?,\n\
    no_extended_statements()?,\n\
    no_extended_statements(0)?,\n\
    no_extended_statements(1)?,\n\
    octal?,\n\
    octal()?,\n\
    octal(0)?,\n\
    octal(1)?,\n\
    no_octal()?,\n\
    no_octal(0)?,\n\
    no_octal(1)?,\n\
    strict?,\n\
    strict()?,\n\
    strict(0)?,\n\
    strict(1)?,\n\
    no_strict()?,\n\
    no_strict(0)?,\n\
    no_strict(1)?,\n\
    trace?,\n\
    trace()?,\n\
    trace(0)?,\n\
    trace(1)?,\n\
    no_trace()?,\n\
    no_trace(0)?,\n\
    no_trace(1)?,\n\
    unsafe_math?,\n\
    unsafe_math()?,\n\
    unsafe_math(0)?,\n\
    unsafe_math(1)?,\n\
    no_unsafe_math()?,\n\
    no_unsafe_math(0)?,\n\
    no_unsafe_math(1)?;\n\
    ",
        "expected messages": [
            // Allow With
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 2,
                "message": "prima pragma failed."
            },
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 3,
                "message": "prima pragma failed."
            },
            {
                "options": "no_allow_with",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 4,
                "message": "prima pragma failed."
            },
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 5,
                "message": "prima pragma failed."
            },
            {
                "options": "no_allow_with",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 6,
                "message": "prima pragma failed."
            },
            {
                "options": "no_allow_with",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 7,
                "message": "prima pragma failed."
            },
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 8,
                "message": "prima pragma failed."
            },
            // Binary
            {
                "options": "binary",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 9,
                "message": "prima pragma failed."
            },
            {
                "options": "binary",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 10,
                "message": "prima pragma failed."
            },
            {
                "options": "no_binary",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 11,
                "message": "prima pragma failed."
            },
            {
                "options": "binary",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 12,
                "message": "prima pragma failed."
            },
            {
                "options": "no_binary",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 13,
                "message": "prima pragma failed."
            },
            {
                "options": "no_binary",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 14,
                "message": "prima pragma failed."
            },
            {
                "options": "binary",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 15,
                "message": "prima pragma failed."
            },
            // Coverage
            {
                "options": "coverage",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 16,
                "message": "prima pragma failed."
            },
            {
                "options": "coverage",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 17,
                "message": "prima pragma failed."
            },
            {
                "options": "no_coverage",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 18,
                "message": "prima pragma failed."
            },
            {
                "options": "coverage",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 19,
                "message": "prima pragma failed."
            },
            {
                "options": "no_coverage",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 20,
                "message": "prima pragma failed."
            },
            {
                "options": "no_coverage",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 21,
                "message": "prima pragma failed."
            },
            {
                "options": "coverage",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 22,
                "message": "prima pragma failed."
            },
            // Debug
            {
                "options": "debug",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 23,
                "message": "prima pragma failed."
            },
            {
                "options": "debug",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 24,
                "message": "prima pragma failed."
            },
            {
                "options": "no_debug",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 25,
                "message": "prima pragma failed."
            },
            {
                "options": "debug",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 26,
                "message": "prima pragma failed."
            },
            {
                "options": "no_debug",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 27,
                "message": "prima pragma failed."
            },
            {
                "options": "no_debug",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 28,
                "message": "prima pragma failed."
            },
            {
                "options": "debug",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 29,
                "message": "prima pragma failed."
            },
            // Extended Escape Sequences
            {
                "options": "extended_escape_sequences",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 30,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_escape_sequences",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 31,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_escape_sequences",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 32,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_escape_sequences",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 33,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_escape_sequences",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 34,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_escape_sequences",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 35,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_escape_sequences",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 36,
                "message": "prima pragma failed."
            },
            // Extended Operators
            {
                "options": "extended_operators,no_extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 37,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_operators,no_extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 38,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_operators,no_extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 39,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_operators,no_extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 40,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_operators,extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 41,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_operators,extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 42,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_operators,no_extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 43,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_operators,no_extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 44,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_operators,no_extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 45,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_operators,extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 46,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_operators,extended_operators_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 47,
                "message": "prima pragma failed."
            },
            // Extended Statements
            {
                "options": "extended_statements,no_extended_statements_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 48,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_statements,no_extended_statements_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 49,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_statements,no_extended_statements_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 50,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_statements,no_extended_statements_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 51,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_statements,no_extended_statements_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 52,
                "message": "prima pragma failed."
            },
            {
                "options": "no_extended_statements,no_extended_statements_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 53,
                "message": "prima pragma failed."
            },
            {
                "options": "extended_statements,no_extended_statements_safe",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 54,
                "message": "prima pragma failed."
            },
            // Octal
            {
                "options": "octal",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 55,
                "message": "prima pragma failed."
            },
            {
                "options": "octal",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 56,
                "message": "prima pragma failed."
            },
            {
                "options": "no_octal",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 57,
                "message": "prima pragma failed."
            },
            {
                "options": "octal",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 58,
                "message": "prima pragma failed."
            },
            {
                "options": "no_octal",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 59,
                "message": "prima pragma failed."
            },
            {
                "options": "no_octal",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 60,
                "message": "prima pragma failed."
            },
            {
                "options": "octal",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 61,
                "message": "prima pragma failed."
            },
            // Strict
            {
                "options": "strict",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 62,
                "message": "prima pragma failed."
            },
            {
                "options": "strict",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 63,
                "message": "prima pragma failed."
            },
            {
                "options": "no_strict",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 64,
                "message": "prima pragma failed."
            },
            {
                "options": "strict",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 65,
                "message": "prima pragma failed."
            },
            {
                "options": "no_strict",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 66,
                "message": "prima pragma failed."
            },
            {
                "options": "no_strict",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 67,
                "message": "prima pragma failed."
            },
            {
                "options": "strict",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 68,
                "message": "prima pragma failed."
            },
            // Trace
            {
                "options": "trace",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 69,
                "message": "prima pragma failed."
            },
            {
                "options": "trace",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 70,
                "message": "prima pragma failed."
            },
            {
                "options": "no_trace",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 71,
                "message": "prima pragma failed."
            },
            {
                "options": "trace",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 72,
                "message": "prima pragma failed."
            },
            {
                "options": "no_trace",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 73,
                "message": "prima pragma failed."
            },
            {
                "options": "no_trace",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 74,
                "message": "prima pragma failed."
            },
            {
                "options": "trace",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 75,
                "message": "prima pragma failed."
            },
            // Unsafe Math
            {
                "options": "unsafe_math",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 76,
                "message": "prima pragma failed."
            },
            {
                "options": "unsafe_math",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 77,
                "message": "prima pragma failed."
            },
            {
                "options": "no_unsafe_math",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 78,
                "message": "prima pragma failed."
            },
            {
                "options": "unsafe_math",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 79,
                "message": "prima pragma failed."
            },
            {
                "options": "no_unsafe_math",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 80,
                "message": "prima pragma failed."
            },
            {
                "options": "no_unsafe_math",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 81,
                "message": "prima pragma failed."
            },
            {
                "options": "unsafe_math",
                "message level": 2,
                "error code": "PRAGMA_FAILED",
                "line #": 82,
                "message": "prima pragma failed."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST"
                }
            ]
        }
    },

    // Verify the tests after a set
    {
        //"verbose": true,
        "slow": true,
        "name": "verify that setting or clearing a pragma results in the correct value",
        "program": "use allow_with(1), allow_with?, allow_with()?, allow_with(1)?, allow_with(0), allow_with(0)?,\n\
    no_allow_with(1), no_allow_with(1)?, no_allow_with(0), no_allow_with?, no_allow_with()?, no_allow_with(0)?,\n\
    binary(1), binary?, binary()?, binary(1)?, binary(0), binary(0)?,\n\
    no_binary(1), no_binary(1)?, no_binary(0), no_binary?, no_binary()?, no_binary(0)?,\n\
    coverage(1), coverage?, coverage()?, coverage(1)?, coverage(0), coverage(0)?,\n\
    no_coverage(1), no_coverage(1)?, no_coverage(0), no_coverage?, no_coverage()?, no_coverage(0)?,\n\
    debug(1), debug?, debug()?, debug(1)?, debug(0), debug(0)?,\n\
    no_debug(1), no_debug(1)?, no_debug(0), no_debug?, no_debug()?, no_debug(0)?,\n\
    debug_lexer(1), debug_lexer?, debug_lexer()?, debug_lexer(1)?, debug_lexer(0), debug_lexer(0)?,\n\
    no_debug_lexer(1), no_debug_lexer(1)?, no_debug_lexer(0), no_debug_lexer?, no_debug_lexer()?, no_debug_lexer(0)?,\n\
    extended_escape_sequences(1), extended_escape_sequences?, extended_escape_sequences()?, extended_escape_sequences(1)?, extended_escape_sequences(0), extended_escape_sequences(0)?,\n\
    no_extended_escape_sequences(1), no_extended_escape_sequences(1)?, no_extended_escape_sequences(0), no_extended_escape_sequences?, no_extended_escape_sequences()?, no_extended_escape_sequences(0)?,\n\
    extended_operators(1), extended_operators?, extended_operators()?, extended_operators(1)?, extended_operators(0), extended_operators(0)?,\n\
    no_extended_operators(1), no_extended_operators(1)?, no_extended_operators(0), no_extended_operators?, no_extended_operators()?, no_extended_operators(0)?,\n\
    extended_statements(1), extended_statements?, extended_statements()?, extended_statements(1)?, extended_statements(0), extended_statements(0)?,\n\
    no_extended_statements(1), no_extended_statements(1)?, no_extended_statements(0), no_extended_statements?, no_extended_statements()?, no_extended_statements(0)?,\n\
    octal(1), octal?, octal()?, octal(1)?, octal(0), octal(0)?,\n\
    no_octal(1), no_octal(1)?, no_octal(0), no_octal?, no_octal()?, no_octal(0)?,\n\
    strict(1), strict?, strict()?, strict(1)?, strict(0), strict(0)?,\n\
    no_strict(1), no_strict(1)?, no_strict(0), no_strict?, no_strict()?, no_strict(0)?,\n\
    trace(1), trace?, trace()?, trace(1)?, trace(0), trace(0)?,\n\
    no_trace(1), no_trace(1)?, no_trace(0), no_trace?, no_trace()?, no_trace(0)?,\n\
    unsafe_math(1), unsafe_math?, unsafe_math()?, unsafe_math(1)?, unsafe_math(0), unsafe_math(0)?,\n\
    no_unsafe_math(1), no_unsafe_math(1)?, no_unsafe_math(0), no_unsafe_math?, no_unsafe_math()?, no_unsafe_math(0)?;\n\
\n",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST"
                }
            ]
        }
    },

    // Test that (-[true|false|string]) is not valid
    {
        //"verbose": true,
        "name": "verify that (-) is invalid as a pragma parameter",
        "program": "use octal(-);\n\
use binary(-\"flow\");\n\
use unsafe_math(-false);\n\
use strict(-true);\n\
use trace(*);\n\
use debug() extended_operators();\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 1,
                "message": "a pragma argument cannot just be '-'."
            },
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 2,
                "message": "invalid negative argument for a pragma."
            },
            {
                "message level": 2,
                "error code": "INCOMPATIBLE_PRAGMA_ARGUMENT",
                "line #": 2,
                "message": "incompatible pragma argument."
            },
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 3,
                "message": "invalid negative argument for a pragma."
            },
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 4,
                "message": "invalid negative argument for a pragma."
            },
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 5,
                "message": "invalid argument type for a pragma."
            },
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 5,
                "message": "invalid argument for a pragma."
            },
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 5,
                "message": "pragmas must be separated by commas and ended by a semicolon."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 5,
                "message": "';' was expected after 'USE' (current token: 'MULTIPLY')."
            },
            {
                "message level": 2,
                "error code": "BAD_PRAGMA",
                "line #": 6,
                "message": "pragmas must be separated by commas."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST"
                }
            ]
        }
    },

    // invalid stand alone list of attributes
    {
        //"verbose": true,
        "slow": true,
        "name": "invalid list of stand alone attributes",
        "program": "private abstract;\n\
private false;\n\
private native;\n\
private private;\n\
private protected;\n\
private public;\n\
private static;\n\
private transient;\n\
private true;\n\
private volatile;\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_ATTRIBUTES",
                "line #": 1,
                "message": "a statement with only attributes (ABSTRACT) is not allowed."
            },
            {
                "message level": 2,
                "error code": "INVALID_ATTRIBUTES",
                "line #": 2,
                "message": "no attributes were expected here (statements, expressions and pragmas cannot be annotated)."
            },
            {
                "message level": 2,
                "error code": "INVALID_ATTRIBUTES",
                "line #": 3,
                "message": "a statement with only attributes (NATIVE) is not allowed."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 4,
                "message": "the 'PRIVATE' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 5,
                "message": "the 'PROTECTED' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 6,
                "message": "the 'PUBLIC' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_ATTRIBUTES",
                "line #": 7,
                "message": "a statement with only attributes (STATIC) is not allowed."
            },
            {
                "message level": 2,
                "error code": "INVALID_ATTRIBUTES",
                "line #": 8,
                "message": "a statement with only attributes (TRANSIENT) is not allowed."
            },
            {
                "message level": 2,
                "error code": "INVALID_ATTRIBUTES",
                "line #": 9,
                "message": "no attributes were expected here (statements, expressions and pragmas cannot be annotated)."
            },
            {
                "message level": 2,
                "error code": "INVALID_ATTRIBUTES",
                "line #": 10,
                "message": "a statement with only attributes (VOLATILE) is not allowed."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FALSE"
                        },
                        {
                            "node type": "PRIVATE",
                            "attribute node": [
                                {
                                    "node type": "PRIVATE"
                                }
                            ]
                        },
                        {
                            "node type": "PROTECTED",
                            "attribute node": [
                                {
                                    "node type": "PRIVATE"
                                }
                            ]
                        },
                        {
                            "node type": "PUBLIC",
                            "attribute node": [
                                {
                                    "node type": "PRIVATE"
                                }
                            ]
                        },
                        {
                            "node type": "TRUE"
                        }
                    ]
                }
            ]
        }
    },

    // unexpected colon
    {
        //"verbose": true,
        //"slow": true,
        "name": "colon by itself or with attributes",
        "program": "invalid_colon;\n\
: ;\n\
abstract: invalid_label;\n\
public: valid_in_a_class;\n\
protected: valid_in_a_class_too;\n\
private: test_for_the_class;\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_OPERATOR",
                "line #": 2,
                "message": "unexpected ':' without an identifier."
            },
            {
                "message level": 2,
                "error code": "INVALID_OPERATOR",
                "line #": 3,
                "message": "unexpected ':' without a valid label."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IDENTIFIER",
                            "label": "invalid_colon"
                        },
                        {
                            "node type": "IDENTIFIER",
                            "label": "invalid_label"
                        },
                        {
                            "node type": "LABEL",
                            "label": "public"
                        },
                        {
                            "node type": "IDENTIFIER",
                            "label": "valid_in_a_class"
                        },
                        {
                            "node type": "LABEL",
                            "label": "protected"
                        },
                        {
                            "node type": "IDENTIFIER",
                            "label": "valid_in_a_class_too"
                        },
                        {
                            "node type": "LABEL",
                            "label": "private"
                        },
                        {
                            "node type": "IDENTIFIER",
                            "label": "test_for_the_class"
                        }
                    ]
                }
            ]
        }
    }

]
// end
// vim: ts=4 sw=4 et
