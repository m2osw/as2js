// start
[

    // ~!a => ~(!(a)) -- breaks the NOT MATCH (~!) operator back in LOGICAL NOT + BITWISE NOT
    {
        "verbose": true,
        "name": "~!(a + b) -> ~(!(a + b))",
        "program": "~!(a + b);",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "BITWISE_NOT",
                            "children": [
                                {
                                    "node type": "LOGICAL_NOT",
                                    "children": [
                                        {
                                            "node type": "ADD",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "b"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // ~~a => ~(~(a)) -- breaks the SMART MATCH (~~) operator back in BITWISE NOT + BITWISE NOT
    {
        "verbose": true,
        "name": "~~(a - b) -> ~(~(a - b))",
        "program": "~~(a - b);",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "BITWISE_NOT",
                            "children": [
                                {
                                    "node type": "BITWISE_NOT",
                                    "children": [
                                        {
                                            "node type": "SUBTRACT",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "b"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // 37.+(51) can be parsed
    {
        "verbose": true,
        "name": "37.+(51)",
        "program": "37.+(51);",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "CALL",
                            "children": [
                                {
                                    "node type": "MEMBER",
                                    "children": [
                                        {
                                            "node type": "INTEGER",
                                            "integer": 37
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "+"
                                        }
                                    ]
                                },
                                {
                                    "node type": "LIST",
                                    "children": [
                                        {
                                            "node type": "INTEGER",
                                            "integer": 51
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // template with three expressions
    {
        "verbose": true,
        "name": "`template ${first * expression} and first middle ${ operations ** complexity + reached } $not $here ${another & expression} and finally the tail.`",
        "program": "use extended_operators(2); `template ${first * expression} and first middle ${ operations ** complexity + reached } $not $here ${another & expression} and finally the tail.`;",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "ADD",
                                    "children": [
                                        {
                                            "node type": "ADD",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "ADD",
                                                            "children": [
                                                                {
                                                                    "node type": "ADD",
                                                                    "children": [
                                                                        {
                                                                            "node type": "STRING",
                                                                            "label": "template "
                                                                        },
                                                                        {
                                                                            "node type": "AS",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MULTIPLY",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "first"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "expression"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "string"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "STRING",
                                                                    "label": " and first middle "
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "AS",
                                                            "children": [
                                                                {
                                                                    "node type": "ADD",
                                                                    "children": [
                                                                        {
                                                                            "node type": "POWER",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "operations"
                                                                                },
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "complexity"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "reached"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "string"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "STRING",
                                                    "label": " $not $here "
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "AS",
                                            "children": [
                                                {
                                                    "node type": "BITWISE_AND",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "another"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "expression"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "string"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "STRING",
                                    "label": " and finally the tail."
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // template within a template
    {
        "verbose": true,
        "name": "`\\`head ${a+`start${sub/expression}end`+b} tail\\`.`",
        "program": "`\\`head ${a+`start${sub/expression}end`+b} tail\\`.`;",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "ADD",
                                    "children": [
                                        {
                                            "node type": "STRING",
                                            "label": "`head "
                                        },
                                        {
                                            "node type": "AS",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "ADD",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "a"
                                                                },
                                                                {
                                                                    "node type": "ADD",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "STRING",
                                                                                    "label": "start"
                                                                                },
                                                                                {
                                                                                    "node type": "AS",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "DIVIDE",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "sub"
                                                                                                },
                                                                                                {
                                                                                                    "node type": "IDENTIFIER",
                                                                                                    "label": "expression"
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "string"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "node type": "STRING",
                                                                            "label": "end"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "b"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "string"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "STRING",
                                    "label": " tail`."
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }

]
// end
// vim: ts=4 sw=4 et
