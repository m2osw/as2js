// start
[

    // A package declaration must include a '{' after its name
    {
        //"verbose": true,
        "name": "'{' missing after package name",
        "program": "package the.grand_package.name var prog = 13.9; }\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected after the package name."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "the.grand_package.name",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "VAR",
                                            "children": [
                                                {
                                                    "node type": "VARIABLE",
                                                    "label": "prog",
                                                    "children": [
                                                        {
                                                            "node type": "SET",
                                                            "children": [
                                                                {
                                                                    "node type": "FLOAT64",
                                                                    "float": 13.9
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A package declaration must end with a '}' after its list of directives
    {
        //"verbose": true,
        "name": "'}' missing after package directives",
        "program": "package the.funky_package.name { var pi = 3.14159;\n",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'}' expected after the package declaration."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "the.funky_package.name",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "VAR",
                                            "children": [
                                                {
                                                    "node type": "VARIABLE",
                                                    "label": "pi",
                                                    "children": [
                                                        {
                                                            "node type": "SET",
                                                            "children": [
                                                                {
                                                                    "node type": "FLOAT64",
                                                                    "float": 3.14159
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A package name not in a string must be identifiers separated by periods
    {
        //"verbose": true,
        "name": "invalid package name (ends with '.')",
        "program": "package the.name. { function a(b) { if(b) console.log('\"b\" is true'); } }\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "invalid package name (expected an identifier after the last '.')."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'IF' block."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "the.name",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FUNCTION",
                                            "label": "a",
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "b"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "IF",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "b"
                                                                },
                                                                {
                                                                    "node type": "DIRECTIVE_LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "CALL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "console"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "log"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "LIST",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "STRING",
                                                                                            "label": "\"b\" is true"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A package name not in a string must be identifiers separated by periods
    {
        //"verbose": true,
        "name": "invalid package name (includes keyword 'private')",
        "program": "package the.private.name { function a(b) { if(b) console.log('\"b\" is true'); } }\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "invalid package name (expected an identifier after the last '.')."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'IF' block."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "the.name",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FUNCTION",
                                            "label": "a",
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "b"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "IF",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "b"
                                                                },
                                                                {
                                                                    "node type": "DIRECTIVE_LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "CALL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "console"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "log"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "LIST",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "STRING",
                                                                                            "label": "\"b\" is true"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A package name not in a string must be identifiers separated by periods
    {
        //"verbose": true,
        "name": "invalid package name (ends with 'private')",
        "program": "package the.private { function a(b) { if(b) console.log('\"b\" is true'); } }\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "invalid package name (expected an identifier after the last '.')."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'IF' block."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "PACKAGE",
                            "label": "the",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FUNCTION",
                                            "label": "a",
                                            "children": [
                                                {
                                                    "node type": "PARAMETERS",
                                                    "children": [
                                                        {
                                                            "node type": "PARAM",
                                                            "label": "b"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "IF",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "b"
                                                                },
                                                                {
                                                                    "node type": "DIRECTIVE_LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "CALL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "MEMBER",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "console"
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "log"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "LIST",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "STRING",
                                                                                            "label": "\"b\" is true"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing a couple of packages
    {
        //"verbose": true,
        "name": "import packages",
        "program": "import renamed = snap.website.extensions;\n\
import implements snap.numbers.complex;\n\
import \"magic.numbers\", namespace magical, include \"rhetorics\";\n\
import snap.extensions.*, exclude ajax;\n\
import edit = \"snap.editor\";\n",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 5,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.website.extensions",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "renamed"
                                }
                            ]
                        },
                        {
                            "node type": "IMPORT",
                            "label": "snap.numbers.complex",
                            "flags": "IMPORT_FLAG_IMPLEMENTS"
                        },
                        {
                            "node type": "IMPORT",
                            "label": "magic.numbers",
                            "children": [
                                {
                                    "node type": "USE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "magical"
                                        }
                                    ]
                                },
                                {
                                    "node type": "INCLUDE",
                                    "children": [
                                        {
                                            "node type": "STRING",
                                            "label": "rhetorics"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "IMPORT",
                            "label": "snap.extensions.*",
                            "children": [
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "ajax"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "IMPORT",
                            "label": "snap.editor",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "edit"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing and renaming a package with a string and a period fails
    {
        //"verbose": true,
        "name": "import packages: invalid name string/member mix",
        "program": "import new_name = \"snap\".invalid;",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "a package name is either a string or a list of identifiers separated by periods (.); you cannot mixed both."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.invalid",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "new_name"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing and renaming a package without a string or identifier
    {
        //"verbose": true,
        "name": "import packages: invalid name, missing string or identifier",
        "program": "import new_name = .invalid;",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package was expected."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": ".invalid",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "new_name"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Using '*' is not compatible with renaming
    {
        //"verbose": true,
        "name": "import packages: * cannot be used when renaming a package",
        "program": "import other_name = snap.*;",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the * notation cannot be used when renaming an import."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.*",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "other_name"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing and renaming a package without a string or identifier
    {
        //"verbose": true,
        "name": "import packages: * must be last",
        "program": "import snap.*.and.more;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the * notation can only be used once at the end of a name."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.*.and.more"
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing name must be identifiers seperated by periods
    {
        //"verbose": true,
        "name": "import packages: * must be last",
        "program": "import snap.*.and.more;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the * notation can only be used once at the end of a name."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.*.and.more"
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing name must be identifiers seperated by periods, not strings
    {
        //"verbose": true,
        "name": "import packages cannot include identifiers and strings",
        "program": "import snap.\"and\".more;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "a package name is either a string or a list of identifiers separated by periods (.); you cannot mixed both."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap..more"
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing name must end with an identifier
    {
        //"verbose": true,
        "name": "import package names cannot end with a period",
        "program": "import snap.and.;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package was expected."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.and."
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing name must end with an identifier
    {
        //"verbose": true,
        "name": "import package cannot just be an asterisk",
        "program": "import *;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "a composed name or a string was expected after 'import'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": ""
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing cannot at the same time include and exclude...
    {
        //"verbose": true,
        "name": "import package cannot exclude and include at the same time",
        "program": "import snap.stuff, exclude 'this', include 'that';",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_IMPORT",
                "line #": 1,
                "message": "include and exclude are mutually exclusive."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.stuff",
                            "children": [
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "STRING",
                                            "label": "this"
                                        }
                                    ]
                                },
                                {
                                    "node type": "INCLUDE",
                                    "children": [
                                        {
                                            "node type": "STRING",
                                            "label": "that"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing cannot at the same time include and exclude...
    {
        //"verbose": true,
        "name": "import package cannot include and exclude at the same time",
        "program": "import snap.stuff, include first, exclude last;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_IMPORT",
                "line #": 1,
                "message": "include and exclude are mutually exclusive."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "snap.stuff",
                            "children": [
                                {
                                    "node type": "INCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "first"
                                        }
                                    ]
                                },
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "last"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing followed by anything other than namespace, include, exclude
    {
        //"verbose": true,
        "name": "import package extras not namespace, include, nor exclude",
        "program": "import feather.stuff, include only_this_class, oops;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_IMPORT",
                "line #": 1,
                "message": "namespace, include or exclude was expected after the comma."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'IMPORT' (current token: 'IDENTIFIER')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "feather.stuff",
                            "children": [
                                {
                                    "node type": "INCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "only_this_class"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing followed by a comma and not namespace or an identifier
    {
        //"verbose": true,
        "name": "import with an unexpected token after the comma",
        "program": "import light.stuff, exclude but_that_class, 123;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'IMPORT' (current token: 'INT64')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "light.stuff",
                            "children": [
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "but_that_class"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Importing followed by a comma and not namespace or an identifier
    {
        //"verbose": true,
        "name": "import two commas in a row...",
        "program": "import light.stuff, exclude one,, exclude two;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_IMPORT",
                "line #": 1,
                "message": "two commas in a row is not allowed while describing an import."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "light.stuff",
                            "children": [
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "one"
                                        }
                                    ]
                                },
                                {
                                    "node type": "EXCLUDE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "two"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Importing name with double dots
    {
        //"verbose": true,
        "name": "import two period one after another (i.e. a range)...",
        "program": "import string..buffer..overflow;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package is expected to be separated by single periods (.)."
            },
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package is expected to be separated by single periods (.)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "string.buffer.overflow"
                        }
                    ]
                }
            ]
        }
    },

    // Importing name with triple dots
    {
        //"verbose": true,
        "name": "import three periods one after another (i.e. a rest)...",
        "program": "import string...buffer...overflow;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package is expected to be separated by single periods (.)."
            },
            {
                "message level": 2,
                "error code": "INVALID_PACKAGE_NAME",
                "line #": 1,
                "message": "the name of a package is expected to be separated by single periods (.)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IMPORT",
                            "label": "string.buffer.overflow"
                        }
                    ]
                }
            ]
        }
    },
 
    // Use namespace
    {
        //"verbose": true,
        "name": "use namespace",
        "program": "use namespace snapwebsites;\n\
attrs use namespace extra;\n",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "USE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "snapwebsites"
                                }
                            ]
                        },
                        {
                            "node type": "USE",
                            "attribute node": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "attrs"
                                }
                            ],
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "extra"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Namespace block
    {
        //"verbose": true,
        "name": "namespace defining an enumeration",
        "program": "namespace snap { enum escargot { bourgogne, bigornot, planorbe }; };",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "NAMESPACE",
                            "label": "snap",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ENUM",
                                                    "label": "escargot",
                                                    "children": [
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "bourgogne",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 0
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "bigornot",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": 'bourgogne'
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "planorbe",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": 'bigornot'
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]

                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Namespace block without a block
    {
        //"verbose": true,
        "name": "namespace snapwebsites;",
        "program": "namespace snapwebsites;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_NAMESPACE",
                "line #": 1,
                "message": "'{' missing after the name of this namespace."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "NAMESPACE",
                            "label": "snapwebsites"
                        }
                    ]
                }
            ]
        }
    },
 
    // Namespace block without a name
    {
        //"verbose": true,
        "name": "namespace without a name makes things inside private",
        "program": "namespace { enum colors { red = { r: 255, g: 0, b: 0 }, green = { r: 0, g: 255, b: 0 }, blue = { r: 0, g: 0, b: 255 } }; }",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "NAMESPACE",
                            "label": "",
                            "attribute node": [
                                {
                                    "node type": "PRIVATE"
                                }
                            ],
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ENUM",
                                                    "label": "colors",
                                                    "children": [
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "red",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "OBJECT_LITERAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "r"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 255
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "g"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "b"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "green",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "OBJECT_LITERAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "r"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "g"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 255
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "b"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "blue",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "OBJECT_LITERAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "r"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "g"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 0
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "b"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "INT64",
                                                                                            "integer": 255
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Namespace block without a name and existing attributes
    {
        //"verbose": true,
        "slow": true,
        "name": "namespace without a name and some attributes",
        "program": "native static namespace { enum strength { min = 55, average, max }; }",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "NAMESPACE",
                            "label": "",
                            "attribute node": [
                                {
                                    "node type": "NATIVE"
                                },
                                {
                                    "node type": "STATIC"
                                },
                                {
                                    "node type": "PRIVATE"
                                }
                            ],
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ENUM",
                                                    "label": "strength",
                                                    "children": [
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "min",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 55
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "average",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "min"
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "max",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "average"
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Namespace block without a name and existing attributes including private
    {
        //"verbose": true,
        "name": "namespace without a name and some attributes including 'private'",
        "program": "native private static namespace { enum class strength: Number { min = 5 + 5, average = min + 3, max = min + 10 }; }",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "NAMESPACE",
                            "label": "",
                            "attribute node": [
                                {
                                    "node type": "NATIVE"
                                },
                                {
                                    "node type": "PRIVATE"
                                },
                                {
                                    "node type": "STATIC"
                                }
                            ],
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ENUM",
                                                    "label": "strength",
                                                    "flags": "ENUM_FLAG_CLASS",
                                                    "children": [
                                                        {
                                                            "node type": "TYPE",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "Number"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "min",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 5
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 5
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "average",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "min"
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 3
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "max",
                                                            "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "ADD",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "IDENTIFIER",
                                                                                    "label": "min"
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 10
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // conditional value without the ':'
    {
        //"verbose": true,
        "slow": true,
        "name": "conditional missing the ':' character",
        "program": "function get red(color: c = highlighted ? input) { this.red = c; }",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_CONDITIONAL",
                "line #": 1,
                "message": "invalid use of the conditional operator, ':' was expected."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FUNCTION",
                            "label": "->red",
                            "flags": "FUNCTION_FLAG_GETTER",
                            "children": [
                                {
                                    "node type": "PARAMETERS",
                                    "children": [
                                        {
                                            "node type": "PARAM",
                                            "label": "color",
                                            "children": [
                                                {
                                                    "node type": "TYPE",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "c"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "SET",
                                                    "children": [
                                                        {
                                                            "node type": "CONDITIONAL",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "highlighted"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "input"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "THIS"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "red"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "c"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // scope in an expression not followed by an identifier
    {
        //"verbose": true,
        "slow": true,
        "name": "scope in expression must be followed by an identifier",
        "program": "(a + c::123);\n\
::direct;\n\
a::'string';\n\
b::3.14;\n\
c::[12];\n\
d::{j: 'counter'};\n",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 1,
                "message": "scope operator '::' is expected to be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 1,
                "message": "')' expected to match the '('."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'OPEN_PARENTHESIS' (current token: 'INT64')."
            },
            {
                "message level": 2,
                "error code": "INVALID_OPERATOR",
                "line #": 2,
                "message": "unexpected operator 'SCOPE'."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 3,
                "message": "scope operator '::' is expected to be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 3,
                "message": "';' was expected after 'SCOPE' (current token: 'STRING')."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 4,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 4,
                "message": "scope operator '::' is expected to be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 4,
                "message": "';' was expected after 'SCOPE' (current token: 'FLOAT64')."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 5,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 5,
                "message": "scope operator '::' is expected to be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 5,
                "message": "';' was expected after 'SCOPE' (current token: 'OPEN_SQUARE_BRACKET')."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 6,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 6,
                "message": "scope operator '::' is expected to be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 6,
                "message": "';' was expected after 'SCOPE' (current token: 'OPEN_CURVLY_BRACKET')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ADD",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                },
                                {
                                    "node type": "SCOPE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "c"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "IDENTIFIER",
                            "label": "direct"
                        },
                        {
                            "node type": "SCOPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                }
                            ]
                        },
                        {
                            "node type": "SCOPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "b"
                                }
                            ]
                        },
                        {
                            "node type": "SCOPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "c"
                                }
                            ]
                        },
                        {
                            "node type": "SCOPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "d"
                                }
                            ]
                        },
                        {
                            "node type": "DIRECTIVE_LIST",
                            "children": [
                                {
                                    "node type": "LABEL",
                                    "label": "j"
                                },
                                {
                                    "node type": "STRING",
                                    "label": "counter"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // call without the ')'
    {
        //"verbose": true,
        //"slow": true,
        "name": "function call without the ')'",
        "program": "r = a(;",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_EXPRESSION",
                "line #": 1,
                "message": "unexpected token 'SEMICOLON' found in an expression."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 1,
                "message": "')' expected to end the list of arguments."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "r"
                                },
                                {
                                    "node type": "CALL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "LIST",
                                            "children": [
                                                {
                                                    "node type": "FALSE"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // array dereferencing without the ']'
    {
        //"verbose": true,
        //"slow": true,
        "name": "array access without the ']'",
        "program": "i = stack[123;",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "SQUARE_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "']' expected to end the list of element references or declarations."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "i"
                                },
                                {
                                    "node type": "ARRAY",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "stack"
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 123
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // grouped expressions not ending with ')'
    {
        //"verbose": true,
        //"slow": true,
        "name": "grouped expressions without the ')'",
        "program": "i := 123 * (60 + j;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 1,
                "message": "')' expected to match the '('."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "i"
                                },
                                {
                                    "node type": "MULTIPLY",
                                    "children": [
                                        {
                                            "node type": "INT64",
                                            "integer": 123
                                        },
                                        {
                                            "node type": "ADD",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 60
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "j"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // unterminated array literal
    {
        //"verbose": true,
        //"slow": true,
        "name": "array literal without the ']'",
        "program": "a := [1, 2, , 4;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "SQUARE_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "']' expected to match the '[' of this array."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                },
                                {
                                    "node type": "ARRAY_LITERAL",
                                    "children": [
                                        {
                                            "node type": "LIST",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 2
                                                },
                                                {
                                                    "node type": "EMPTY"
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 4
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // unterminated object literal
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without the '}'",
        "program": "obj := {a: 1, b: 2, c: null, d: 4;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "'}' expected before the ';' to end an object literal."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to match the '{' of this object literal."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "b"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 2
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "c"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "NULL"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "d"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 4
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // object literal with a missing comma
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without all the ','",
        "program": "obj := {a: 1, b: 2 c: null, d: 4;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "',' or '}' expected after the value of a field."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "'}' expected before the ';' to end an object literal."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to match the '{' of this object literal."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "b"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 2
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "c"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "NULL"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "d"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 4
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // object literal with a missing colons
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without all the ':'",
        "program": "obj := {a: 1, b 2, c, d: 4;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 1,
                "message": "':' expected after the name of a field."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 1,
                "message": "':' expected after the name of a field."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "'}' expected before the ';' to end an object literal."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to match the '{' of this object literal."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "b"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 2
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "d"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 4
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // object literal with a missing identifier
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without all the field names",
        "program": "obj := {a: 1, : 2, c: null, d: 4;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD",
                "line #": 1,
                "message": "the name of a field was expected."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "'}' expected before the ';' to end an object literal."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to match the '{' of this object literal."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 2
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "c"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "NULL"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "d"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 4
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // object literal with a missing identifier
    {
        //"verbose": true,
        "slow": true,
        "name": "object literal with private/protected/public fields without a valid scope",
        "program": "obj := {\n\
private: 1,\n\
protected: 2,\n\
public: null,\n\
private::123: 1,\n\
protected::1.23: 2,\n\
public::'123': null,\n\
(end)::valid: 4,\n\
(other + 'here'::valid: 4 };",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD_NAME",
                "line #": 2,
                "message": "'public', 'protected', or 'private' or a dynamic scope cannot be used as a field name, '::' was expected."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD_NAME",
                "line #": 3,
                "message": "'public', 'protected', or 'private' or a dynamic scope cannot be used as a field name, '::' was expected."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD_NAME",
                "line #": 4,
                "message": "'public', 'protected', or 'private' or a dynamic scope cannot be used as a field name, '::' was expected."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 5,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 5,
                "message": "'::' is expected to always be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 5,
                "message": "':' expected after the name of a field."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 5,
                "message": "',' or '}' expected after the value of a field."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD",
                "line #": 5,
                "message": "the name of a field was expected."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 6,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 6,
                "message": "'::' is expected to always be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 6,
                "message": "':' expected after the name of a field."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 6,
                "message": "',' or '}' expected after the value of a field."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD",
                "line #": 6,
                "message": "the name of a field was expected."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 7,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_SCOPE",
                "line #": 7,
                "message": "'::' is expected to always be followed by an identifier."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 7,
                "message": "':' expected after the name of a field."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 7,
                "message": "',' or '}' expected after the value of a field."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD",
                "line #": 7,
                "message": "the name of a field was expected."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 8,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 9,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD_NAME",
                "line #": 9,
                "message": "')' is expected to close a dynamically named object field."
            },
            {
                "message level": 2,
                "error code": "INVALID_FIELD_NAME",
                "line #": 9,
                "message": "'public', 'protected', or 'private' or a dynamic scope cannot be used as a field name, '::' was expected."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 2
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "NULL"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 123
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "FLOAT64",
                                                    "float": 1.23
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 2
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "STRING",
                                                    "label": "123"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": ""
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "NULL"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "",
                                            "children": [
                                                {
                                                    "node type": "VIDENTIFIER",
                                                    "label": "end"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "valid"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 4
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "NAME",
                                            "label": "",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "other"
                                                        },
                                                        {
                                                            "node type": "SCOPE",
                                                            "children": [
                                                                {
                                                                    "node type": "STRING",
                                                                    "label": "here"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "valid"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 4
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // unterminated object literal
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without ':' followed by '}'",
        "program": "obj := {a: 1, b };",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 1,
                "message": "':' expected after the name of a field."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // unterminated object literal
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without ':' followed by ';'",
        "program": "obj := {a: 1, b ;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 1,
                "message": "':' expected after the name of a field."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to match the '{' of this object literal."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // unterminated object literal
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without ':' followed by ',' and '}'",
        "program": "obj := {a: 1, b, };",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 1,
                "message": "':' expected after the name of a field."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // unterminated object literal
    {
        //"verbose": true,
        //"slow": true,
        "name": "object literal without ':' followed by ',' and ';'",
        "program": "obj := {a: 1, b, ;",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "COLON_EXPECTED",
                "line #": 1,
                "message": "':' expected after the name of a field."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to match the '{' of this object literal."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "OBJECT_LITERAL",
                                    "children": [
                                        {
                                            "node type": "NAME",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }

]
// end
// vim: ts=4 sw=4 et
