// start
[
 
    // 'switch' 'with' 'break' 'continue'
    {
        //"verbose": true,
        "name": "'switch' 'with' 'break' and 'continue'",
        "program": "switch(a <=> b) with(~=) autobreak { case 3: a = 3; break; case 6 ... 8: b++; continue; case 'ignore': a.color = b; break default; case 11: a = b <% 5; break bob; default: debugger; b = a + 3; continue crash; }",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the 'COMPARE' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_statements|extended_statements_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "a switch() statement can be followed by a 'with' only if extended statements were turned on (use extended_statements;)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "extended_statements|extended_statements_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "ranges in a 'case' statement are only accepted when extended statements are allowed (use extended_statements;)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the 'ROTATE_LEFT' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SWITCH",
                            "attribute node": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "autobreak"
                                }
                            ],
                            "switch operator": "MATCH",
                            "children": [
                                {
                                    "node type": "COMPARE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "b"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        // case 3
                                        {
                                            "node type": "CASE",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 3
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 3
                                                }
                                            ]
                                        },
                                        {
                                           "node type": "BREAK",
                                            "label": ""
                                        },
                                        // case 6
                                        {
                                            "node type": "CASE",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 6
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 8
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "POST_INCREMENT",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "b"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "CONTINUE",
                                            "label": ""
                                        },
                                        // case ignore
                                        {
                                            "node type": "CASE",
                                            "children": [
                                                {
                                                    "node type": "STRING",
                                                    "label": "ignore"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "b"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "BREAK",
                                            "label": ""
                                        },
                                        // case 11
                                        {
                                            "node type": "CASE",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 11
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "ROTATE_LEFT",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "b"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 5
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "BREAK",
                                            "label": "bob"
                                        },
                                        // default
                                        {
                                            "node type": "DEFAULT"
                                        },
                                        {
                                            "node type": "DEBUGGER"
                                        },
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "b"
                                                },
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 3
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "CONTINUE",
                                            "label": "crash"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Invalid break/continue
    //
    // IMPORTANT NOTE: When certain errors are detected the processor
    //                 skips all tokens up to '}' or ';' and a few other
    //                 characters (really ';' in our case here); thus
    //                 certain things such as the <? operator are silently
    //                 skipped
    {
        //"verbose": true,
        "name": "Invalid break/continue",
        "program": "switch(type ^ 7) { case 't1': a **= 3; break orange case 't2': a = a <? 22; continue case 't3': ++a; test(a = c | b, rest: ...); break default; default a = -105.33; ; }",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the 'ASSIGNMENT_POWER' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "INVALID_LABEL",
                "line #": 1,
                "message": "'break' and 'continue' can be followed by one label only."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'BREAK' (current token: 'CASE')."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_LABEL",
                "line #": 1,
                "message": "'break' and 'continue' can be followed by one label only."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'CONTINUE' (current token: 'CASE')."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "DEFAULT_LABEL",
                "line #": 1,
                "message": "default label expected to be followed by ':'."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SWITCH",
                            "switch operator": "UNKNOWN",
                            "children": [
                                {
                                    "node type": "BITWISE_XOR",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "type"
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 7
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        // case 't1'
                                        {
                                            "node type": "CASE",
                                            "children": [
                                                {
                                                    "node type": "STRING",
                                                    "label": "t1"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "ASSIGNMENT_POWER",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "INT64",
                                                    "integer": 3
                                                }
                                            ]
                                        },
                                        {
                                           "node type": "BREAK",
                                            "label": "orange"
                                        },
                                        {
                                            "node type": "CONTINUE",
                                            "label": ""
                                        },
                                        // case 't3' -- skipped because of missing ';'
                                        {
                                            "node type": "CALL",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "test"
                                                },
                                                {
                                                    "node type": "LIST",
                                                    "children": [
                                                        {
                                                            "node type": "ASSIGNMENT",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "a"
                                                                },
                                                                {
                                                                    "node type": "BITWISE_OR",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "c"
                                                                        },
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "b"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "NAME",
                                                            "label": "rest",
                                                            "children": [
                                                                {
                                                                    "node type": "REST"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "BREAK",
                                            "label": ""
                                        },
                                        // default
                                        {
                                            "node type": "DEFAULT"
                                        },
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "SUBTRACT",
                                                    "children": [
                                                        {
                                                            "node type": "FLOAT64",
                                                            "float": 105.33
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }

]
// end
// vim: ts=4 sw=4 et
