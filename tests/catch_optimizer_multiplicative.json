// multiplicative
[

    // a * b -> multiply(a, b)
    {
        //"verbose": true,
        "name": "55 * 123 -> 6765",
        "program": "55 * 123;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 55
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 123
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "INT64",
                            "integer": 6765
                        }
                    ]
                }
            ]
        }
    },

    // a * b -> multiply(a, b)
    {
        //"verbose": true,
        "name": "5.5 * 123 -> 676.5",
        "program": "5.5 * 123;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 5.5
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 123
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 676.5
                        }
                    ]
                }
            ]
        }
    },

    // a * b -> multiply(a, b)
    {
        //"verbose": true,
        "name": "55 * 1.23 -> 67.65",
        "program": "55 * 1.23;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 55
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 1.23
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 67.65
                        }
                    ]
                }
            ]
        }
    },

    // a * b -> multiply(a, b)
    {
        //"verbose": true,
        "name": "5.5 * 1.23 -> 6.765",
        "program": "5.5 * 1.23;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 5.5
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 1.23
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 6.765
                        }
                    ]
                }
            ]
        }
    },

    // a * NaN -> multiply(a, NaN)
    {
        //"verbose": true,
        "name": "5.5 * NaN -> NaN",
        "program": "5.5 * NaN;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 5.5
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // NaN * a -> multiply(NaN, a)
    {
        //"verbose": true,
        "name": "NaN * 1.23 -> NaN",
        "program": "NaN * 1.23;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 1.23
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // NaN * a -> multiply(NaN, a)
    {
        //"verbose": true,
        "name": "NaN * a -> NaN",
        "program": "NaN * a;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                },
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // a * NaN -> multiply(a, NaN)
    {
        //"verbose": true,
        "name": "a * NaN -> NaN",
        "program": "a * NaN;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // a() * NaN -> a() * NaN
    {
        //"verbose": true,
        "name": "a() * NaN -> a() * NaN",
        "program": "a() * NaN;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "CALL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "LIST"
                                        }
                                    ]
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "CALL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "LIST"
                                        }
                                    ]
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // NaN * a() -> NaN * a()
    {
        //"verbose": true,
        "name": "NaN * a() -> NaN * a()",
        "program": "NaN * a();",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                },
                                {
                                    "node type": "CALL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "LIST"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                },
                                {
                                    "node type": "CALL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "LIST"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // a / b -> divide(a, b)
    {
        //"verbose": true,
        "name": "123 / 7 -> 17",
        "program": "123 / 7;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DIVIDE",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 123
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 7
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "INT64",
                            "integer": 17
                        }
                    ]
                }
            ]
        }
    },

    // a / b -> divide(a, b)
    {
        //"verbose": true,
        "name": "12.3 / 7 -> 1.7",
        "program": "12.3 / 7;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DIVIDE",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 12.3
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 7
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 1.757142857
                        }
                    ]
                }
            ]
        }
    },

    // a / b -> divide(a, b)
    {
        //"verbose": true,
        "name": "123 / 0.7 -> 1.7",
        "program": "123 / 0.7;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DIVIDE",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 123
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 0.7
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 175.714285714
                        }
                    ]
                }
            ]
        }
    },

    // a / b -> divide(a, b)
    {
        //"verbose": true,
        "name": "1.23 / 0.1 -> 12.3",
        "program": "1.23 / 0.1;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DIVIDE",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 1.23
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 0.1
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 12.3
                        }
                    ]
                }
            ]
        }
    },

    // a / NaN -> divide(a, b)
    {
        //"verbose": true,
        "name": "1.23 / NaN -> NaN",
        "program": "1.23 / NaN;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DIVIDE",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 1.23
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // NaN / b -> divide(a, b)
    {
        //"verbose": true,
        "name": "NaN / 0.1 -> NaN",
        "program": "NaN / 0.1;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DIVIDE",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 0.1
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // NaN / a -> divide(NaN, a)
    {
        //"verbose": true,
        "name": "NaN / a -> NaN",
        "program": "NaN / a;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DIVIDE",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                },
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // a / NaN -> divide(a, NaN)
    {
        //"verbose": true,
        "name": "a / NaN -> NaN",
        "program": "a / NaN;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DIVIDE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // a / 0 -> divide(a, 0)
    {
        //"verbose": true,
        "name": "123 / 0 -> Infinity",
        "program": "123 / 0;",
        "expected messages": [
            {
                "message level": 3,
                "error code": "INVALID_NUMBER",
                "line #": 1,
                "message": "division by zero of integers returning +Infinity or -Infinity.",
                "options": 0
            }
        ],
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DIVIDE",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 123
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 0
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": Infinity
                        }
                    ]
                }
            ]
        }
    },

    // a / 0 -> divide(a, 0)
    {
        //"verbose": true,
        "name": "-123 / 0 -> -Infinity",
        "program": "-123 / 0;",
        "expected messages": [
            {
                "message level": 3,
                "error code": "INVALID_NUMBER",
                "line #": 1,
                "message": "division by zero of integers returning +Infinity or -Infinity.",
                "options": 0
            }
        ],
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DIVIDE",
                            "children": [
                                {
                                    "node type": "SUBTRACT",
                                    "children": [
                                        {
                                            "node type": "INT64",
                                            "integer": 123
                                        }
                                    ]
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 0
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": -Infinity
                        }
                    ]
                }
            ]
        }
    },

    // a % b -> modulo(a, b)
    {
        //"verbose": true,
        "name": "123 % 31 -> 30",
        "program": "123 % 31;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MODULO",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 123
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 31
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "INT64",
                            "integer": 30
                        }
                    ]
                }
            ]
        }
    },

    // a % b -> modulo(a, b)
    {
        //"verbose": true,
        "name": "49.2 % 31 -> 18.2",
        "program": "49.2 % 31;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MODULO",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 49.2
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 31
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 18.2
                        }
                    ]
                }
            ]
        }
    },

    // a % b -> modulo(a, b)
    {
        //"verbose": true,
        "name": "123 % 3.1 -> 21.0",
        "program": "123 % 3.1;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MODULO",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 123
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 3.1
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 21.0
                        }
                    ]
                }
            ]
        }
    },

    // a % b -> modulo(a, b)
    {
        //"verbose": true,
        "name": "12.3 % 3.1 -> 3.0",
        "program": "12.3 % 3.1;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MODULO",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 12.3
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 3.1
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 3.0
                        }
                    ]
                }
            ]
        }
    },

    // a % NaN -> modulo(a, NaN)
    {
        //"verbose": true,
        "name": "12.3 % NaN -> NaN",
        "program": "12.3 % NaN;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MODULO",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 12.3
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // NaN % a -> modulo(NaN, a)
    {
        //"verbose": true,
        "name": "NaN % 12.3 -> NaN",
        "program": "NaN % 12.3;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MODULO",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 12.3
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // NaN % a -> modulo(NaN, a)
    {
        //"verbose": true,
        "name": "NaN % a -> NaN",
        "program": "NaN % a;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MODULO",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                },
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // a % NaN -> modulo(a, NaN)
    {
        //"verbose": true,
        "name": "a % NaN -> NaN",
        "program": "a % NaN;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MODULO",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // a / 0 -> modulo(a, 0)
    {
        //"verbose": true,
        "name": "123 % 0 -> NaN",
        "program": "123 % 0;",
        "expected messages": [
            {
                "message level": 3,
                "error code": "INVALID_NUMBER",
                "line #": 1,
                "message": "division by zero for a modulo of integers returning NaN.",
                "options": 0
            }
        ],
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MODULO",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 123
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 0
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // a / 0 -> modulo(a, 0)
    {
        //"verbose": true,
        "name": "-123 % 0 -> NaN",
        "program": "-123 % 0;",
        "expected messages": [
            {
                "message level": 3,
                "error code": "INVALID_NUMBER",
                "line #": 1,
                "message": "division by zero for a modulo of integers returning NaN.",
                "options": 0
            }
        ],
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MODULO",
                            "children": [
                                {
                                    "node type": "SUBTRACT",
                                    "children": [
                                        {
                                            "node type": "INT64",
                                            "integer": 123
                                        }
                                    ]
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 0
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // a ** b -> power(a, b)
    {
        //"verbose": true,
        "name": "123 ** 3 -> 1860867",
        "program": "use extended_operators; 123 ** 3;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "POWER",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 123
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 3
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 1860867.0
                        }
                    ]
                }
            ]
        }
    },

    // a ** b -> power(a, b)
    {
        //"verbose": true,
        "name": "1.23 ** 3 -> 1.860867",
        "program": "use extended_operators; 1.23 ** 3;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "POWER",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 1.23
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 3
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 1.860867
                        }
                    ]
                }
            ]
        }
    },

    // a ** b -> power(a, b)
    {
        //"verbose": true,
        "name": "123 ** 0.3 -> 4.236151986",
        "program": "use extended_operators; 123 ** 0.3;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "POWER",
                            "children": [
                                {
                                    "node type": "INT64",
                                    "integer": 123
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 0.3
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 4.236151986
                        }
                    ]
                }
            ]
        }
    },

    // a ** b -> power(a, b)
    {
        //"verbose": true,
        "name": "12.3 ** 0.3 -> 2.123105295",
        "program": "use extended_operators; 12.3 ** 0.3;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "POWER",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 12.3
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 0.3
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": 2.123105295
                        }
                    ]
                }
            ]
        }
    },

    // a ** NaN -> power(a, NaN)
    {
        //"verbose": true,
        "name": "12.3 ** NaN -> NaN",
        "program": "use extended_operators; 12.3 ** NaN;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "POWER",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 12.3
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // NaN ** a -> power(a, NaN)
    {
        //"verbose": true,
        "name": "NaN ** 12.3 -> NaN",
        "program": "use extended_operators; NaN ** 12.3;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "POWER",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 12.3
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // a ** NaN -> power(a, NaN)
    {
        //"verbose": true,
        "name": "a ** NaN -> NaN",
        "program": "use extended_operators; a ** NaN;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "POWER",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // NaN ** a -> power(NaN, a)
    {
        //"verbose": true,
        "name": "NaN ** a -> NaN",
        "program": "use extended_operators; NaN ** a;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "POWER",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": NaN
                                },
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FLOAT64",
                            "float": NaN
                        }
                    ]
                }
            ]
        }
    },

    // a() * 3.5 -> a() * 3.5
    {
        //"verbose": true,
        "name": "a() * 3.5 -> a() * 3.5",
        "program": "a() * 3.5;",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "CALL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "LIST"
                                        }
                                    ]
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 3.5
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "CALL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "LIST"
                                        }
                                    ]
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 3.5
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // 3.5 * a() -> 3.5 * a()
    {
        //"verbose": true,
        "name": "3.5 * a() -> 3.5 * a()",
        "program": "3.5 * a();",
        "parser result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 3.5
                                },
                                {
                                    "node type": "CALL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "LIST"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "optimizer result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "MULTIPLY",
                            "children": [
                                {
                                    "node type": "FLOAT64",
                                    "float": 3.5
                                },
                                {
                                    "node type": "CALL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "LIST"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }

]
// vim: ts=4 sw=4 et
