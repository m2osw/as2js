// start
[
 
    // A standard type with a range (integers)
    {
        //"verbose": true,
        "name": "type with a range of integers",
        "program": "use large_byte as 0 .. 65535;",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "large_byte"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 0
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 65535
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A standard type using 'mod'
    {
        //"verbose": true,
        "name": "a mod type",
        "program": "use three_bit_number as mod 8;",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "flags": "TYPE_FLAG_MODULO",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "three_bit_number"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 8
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A 'mod' type with a string
    {
        //"verbose": true,
        "name": "a mod type using a string",
        "program": "use not_a_number as mod '8';",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the modulo must be a literal number."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "flags": "TYPE_FLAG_MODULO",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "not_a_number"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A 'mod' type with a string
    {
        //"verbose": true,
        "name": "a mod type without the number",
        "program": "use not_a_number as mod /*oops*/ ;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "missing literal number for a numeric type declaration."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "flags": "TYPE_FLAG_MODULO",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "not_a_number"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with string to start with...
    {
        //"verbose": true,
        "name": "a type without a string instead of a number (left)",
        "program": "use still_not_a_number as '8' .. 92;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must start with a literal number."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'USE' (current token: 'STRING')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "still_not_a_number"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with string to end with...
    {
        //"verbose": true,
        "name": "a type without a string instead of a number (right)",
        "program": "use not_a_number as 8 .. '92';",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must end with a literal number."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "not_a_number"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 8
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with two different types of numbers
    {
        //"verbose": true,
        "name": "a type with a float and an integer",
        "program": "use not_a_number as 8.3 .. +92;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use numbers of the same type on both sides."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "not_a_number"
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 8.3
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 92
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with two different types of numbers
    {
        //"verbose": true,
        "name": "a type with an integer and a float",
        "program": "use not_a_number as +83 .. 92.11;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use numbers of the same type on both sides."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "not_a_number"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 83
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 92.11
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with a REST instead of a RANGE
    {
        //"verbose": true,
        "name": "type with '...' instead of '..'",
        "program": "use bad_range as -65 ... 65;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use '..' to separate the minimum and maximum boundaries (unexpected 'REST')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "bad_range"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": -65
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 65
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with a REST instead of a RANGE
    {
        //"verbose": true,
        "name": "type with '...' instead of '..' and an inverted range",
        "program": "use bad_range as 65 ... -65;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use '..' to separate the minimum and maximum boundaries (unexpected 'REST')."
            },
            {
                "message level": 3,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "numeric type declaration is empty (only accepts 'null') because left value of range is larger than right value."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "bad_range"
                                },
                                {
                                    "node type": "INT64",
                                    "integer": 65
                                },
                                {
                                    "node type": "INT64",
                                    "integer": -65
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with a REST instead of a RANGE
    {
        //"verbose": true,
        "name": "type with '...' instead of '..' and floats",
        "program": "use bad_range as -6.5 ... 6.5;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use '..' to separate the minimum and maximum boundaries (unexpected 'REST')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "bad_range"
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": -6.5
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 6.5
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // A type with a REST instead of a RANGE
    {
        //"verbose": true,
        "name": "type with '...' instead of '..' and inverted range of floats",
        "program": "use bad_range as 6.5 ... -6.5;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "invalid numeric type declaration, the range must use '..' to separate the minimum and maximum boundaries (unexpected 'REST')."
            },
            {
                "message level": 3,
                "error code": "BAD_NUMERIC_TYPE",
                "line #": 1,
                "message": "numeric type declaration is empty (only accepts 'null') because left value of range is larger than right value."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "TYPE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "bad_range"
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": 6.5
                                },
                                {
                                    "node type": "FLOAT64",
                                    "float": -6.5
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }

]
// end
// vim: ts=4 sw=4 et
