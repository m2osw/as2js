// start
[
 
    // Empty enumeration
    {
        //"verbose": true,
        "name": "an empty enumeration",
        "program": "enum empty {};",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "empty",
                            "children": [
                                {
                                    "node type": "EMPTY"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Forward enumeration
    {
        //"verbose": true,
        "name": "forward enumeration definition",
        "program": "enum forward_number;",
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "forward_number"
                        }
                    ]
                }
            ]
        }
    },
 
    // Forward enumeration with missing name
    {
        //"verbose": true,
        "name": "forward enumeration without a name",
        "program": "enum class : strong_type;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "INVALID_ENUM",
                "line #": 1,
                "message": "a forward enumeration must be named."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "",
                            "flags": "ENUM_FLAG_CLASS",
                            "children": [
                                {
                                    "node type": "TYPE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "strong_type"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Forward enumeration without a ';'
    {
        //"verbose": true,
        "name": "\"forward\" enumeration without a ';'",
        "program": "enum class with_a_name : random_type",
        "expected messages": [
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to start the 'enum' definition."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "with_a_name",
                            "flags": "ENUM_FLAG_CLASS",
                            "children": [
                                {
                                    "node type": "TYPE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "random_type"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration starting with ','
    {
        //"verbose": true,
        "name": "enumeration starting with a ','",
        "program": "enum cool_name : double_type { , oops };",
        "expected messages": [
            {
                "message level": 3,
                "error code": "UNEXPECTED_PUNCTUATION",
                "line #": 1,
                "message": "',' unexpected without a name."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "cool_name",
                            "children": [
                                {
                                    "node type": "TYPE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "double_type"
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "oops",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration with two ',' one after another
    {
        //"verbose": true,
        "name": "enumeration with a duplicate ','",
        "program": "enum class with_a_name : complex { killer , , whale };",
        "expected messages": [
            {
                "message level": 3,
                "error code": "UNEXPECTED_PUNCTUATION",
                "line #": 1,
                "message": "',' unexpected without a name."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "with_a_name",
                            "flags": "ENUM_FLAG_CLASS",
                            "children": [
                                {
                                    "node type": "TYPE",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "complex"
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "killer",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "whale",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "killer"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration with a missing identifier
    {
        //"verbose": true,
        "name": "enumeration with a missing identifier with assignment",
        "program": "enum simple { v1, v2 = 3, = 10 };",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_ENUM",
                "line #": 1,
                "message": "each 'enum' entry needs to include an identifier."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "simple",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "v1",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v2",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 3
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 10
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration with a string instead of an identifier
    {
        //"verbose": true,
        "name": "enumeration with a string instead of the identifier",
        "program": "enum simple { v1, v2 = 3, \"v3\" = 10 };",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_ENUM",
                "line #": 1,
                "message": "each 'enum' entry needs to include an identifier."
            }
            //{
            //    "message level": 2,
            //    "error code": "COMMA_EXPECTED",
            //    "line #": 1,
            //    "message": "',' expected between enumeration elements."
            //}
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "simple",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "v1",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v2",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 3
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 10
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration with a missing comma
    {
        //"verbose": true,
        "name": "enumeration with two identifiers in a row",
        "program": "enum missing_comma { v1 v2, v3 };",
        "expected messages": [
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "',' expected between enumeration elements."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "missing_comma",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "v1",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v2",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v1"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v3",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v2"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration without the '}'
    {
        //"verbose": true,
        "name": "enumeration missing the '}' at the end",
        "program": "enum missing_closing_bracket { v1, v2, v3 ;",
        "expected messages": [
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to close the 'enum' definition."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "missing_closing_bracket",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "v1",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v2",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v1"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v3",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v2"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
 
    // Enumeration without the '}' and ';'
    {
        //"verbose": true,
        "name": "enumeration missing the '}' and ';' at the end",
        "program": "enum missing_closing_bracket { v1, v2, v3",
        "expected messages": [
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 1,
                "message": "',' expected between enumeration elements."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to close the 'enum' definition."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "missing_closing_bracket",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "label": "v1",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "INT64",
                                                    "integer": 0
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v2",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v1"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "v3",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "ADD",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "v2"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // Enumeration with a conditional value
    {
        //"verbose": true,
        "slow": true,
        "name": "enum assignment accepts conditional values",
        "program": "enum liberty {\n\
  freedom := is_that_true() ? 'yes' : 'no',\n\
  charlies_angels := no = assignment\n\
};\n",
        "expected messages": [
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 2,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "COMMA_EXPECTED",
                "line #": 3,
                "message": "',' expected between enumeration elements."
            },
            {
                "message level": 2,
                "error code": "INVALID_ENUM",
                "line #": 3,
                "message": "each 'enum' entry needs to include an identifier."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "ENUM",
                            "label": "liberty",
                            "children": [
                                {
                                    "node type": "VARIABLE",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "label": "freedom",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "CONDITIONAL",
                                                    "children": [
                                                        {
                                                            "node type": "CALL",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "is_that_true"
                                                                },
                                                                {
                                                                    "node type": "LIST"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "STRING",
                                                            "label": "yes"
                                                        },
                                                        {
                                                            "node type": "STRING",
                                                            "label": "no"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "flags": "VARIABLE_FLAG_CONST,VARIABLE_FLAG_ENUM",
                                    "label": "charlies_angels",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "no"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "VARIABLE",
                                    "label": "",
                                    "children": [
                                        {
                                            "node type": "SET",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "assignment"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }

]
// end
// vim: ts=4 sw=4 et
