/* test_as2js_node_data.cpp -- written by Alexis WILKE for Made to Order Software Corp. (c) 2005-2017 */

/*

Copyright (c) 2005-2017 Made to Order Software Corp.

http://snapwebsites.org/project/as2js

Permission is hereby granted, free of charge, to any
person obtaining a copy of this software and
associated documentation files (the "Software"), to
deal in the Software without restriction, including
without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


// data made common to both node .cpp files
namespace
{

struct flags_per_node_t
{
    as2js::Node::flag_t const   f_flag;
    char const * const          f_name;
};

flags_per_node_t const g_flags_none[] =
{
    {
        as2js::Node::flag_t::NODE_FLAG_max,
        nullptr
    }
};

flags_per_node_t const g_flags_catch[] =
{
    {
        as2js::Node::flag_t::NODE_CATCH_FLAG_TYPED,
        "TYPED"
    },
    {
        as2js::Node::flag_t::NODE_FLAG_max,
        nullptr
    }
};

flags_per_node_t const g_flags_directive_list[] =
{
    {
        as2js::Node::flag_t::NODE_DIRECTIVE_LIST_FLAG_NEW_VARIABLES,
        "NEW-VARIABLES"
    },
    {
        as2js::Node::flag_t::NODE_FLAG_max,
        nullptr
    }
};

flags_per_node_t const g_flags_enum[] =
{
    {
        as2js::Node::flag_t::NODE_ENUM_FLAG_CLASS,
        "CLASS"
    },
    {
        as2js::Node::flag_t::NODE_ENUM_FLAG_INUSE,
        "INUSE"
    },
    {
        as2js::Node::flag_t::NODE_FLAG_max,
        nullptr
    }
};

flags_per_node_t const g_flags_for[] =
{
    {
        as2js::Node::flag_t::NODE_FOR_FLAG_CONST,
        "CONST"
    },
    {
        as2js::Node::flag_t::NODE_FOR_FLAG_FOREACH,
        "FOREACH"
    },
    {
        as2js::Node::flag_t::NODE_FOR_FLAG_IN,
        "IN"
    },
    {
        as2js::Node::flag_t::NODE_FLAG_max,
        nullptr
    }
};

flags_per_node_t const g_flags_function[] =
{
    {
        as2js::Node::flag_t::NODE_FUNCTION_FLAG_GETTER,
        "GETTER"
    },
    {
        as2js::Node::flag_t::NODE_FUNCTION_FLAG_SETTER,
        "SETTER"
    },
    {
        as2js::Node::flag_t::NODE_FUNCTION_FLAG_OUT,
        "OUT"
    },
    {
        as2js::Node::flag_t::NODE_FUNCTION_FLAG_VOID,
        "VOID"
    },
    {
        as2js::Node::flag_t::NODE_FUNCTION_FLAG_NEVER,
        "NEVER"
    },
    {
        as2js::Node::flag_t::NODE_FUNCTION_FLAG_NOPARAMS,
        "NOPARAMS"
    },
    {
        as2js::Node::flag_t::NODE_FUNCTION_FLAG_OPERATOR,
        "OPERATOR"
    },
    {
        as2js::Node::flag_t::NODE_FLAG_max,
        nullptr
    }
};

flags_per_node_t const g_flags_identifier[] =
{
    {
        as2js::Node::flag_t::NODE_IDENTIFIER_FLAG_WITH,
        "WITH"
    },
    {
        as2js::Node::flag_t::NODE_IDENTIFIER_FLAG_TYPED,
        "TYPED"
    },
    {
        as2js::Node::flag_t::NODE_FLAG_max,
        nullptr
    }
};

flags_per_node_t const g_flags_import[] =
{
    {
        as2js::Node::flag_t::NODE_IMPORT_FLAG_IMPLEMENTS,
        "IMPLEMENTS"
    },
    {
        as2js::Node::flag_t::NODE_FLAG_max,
        nullptr
    }
};

flags_per_node_t const g_flags_package[] =
{
    {
        as2js::Node::flag_t::NODE_PACKAGE_FLAG_FOUND_LABELS,
        "FOUND-LABELS"
    },
    {
        as2js::Node::flag_t::NODE_PACKAGE_FLAG_REFERENCED,
        "REFERENCED"
    },
    {
        as2js::Node::flag_t::NODE_FLAG_max,
        nullptr
    }
};

flags_per_node_t const g_flags_param_match[] =
{
    {
        as2js::Node::flag_t::NODE_PARAM_MATCH_FLAG_UNPROTOTYPED,
        "UNPROTOTYPED"
    },
    {
        as2js::Node::flag_t::NODE_FLAG_max,
        nullptr
    }
};

flags_per_node_t const g_flags_param[] =
{
    {
        as2js::Node::flag_t::NODE_PARAM_FLAG_CONST,
        "CONST"
    },
    {
        as2js::Node::flag_t::NODE_PARAM_FLAG_IN,
        "IN"
    },
    {
        as2js::Node::flag_t::NODE_PARAM_FLAG_OUT,
        "OUT"
    },
    {
        as2js::Node::flag_t::NODE_PARAM_FLAG_NAMED,
        "NAMED"
    },
    {
        as2js::Node::flag_t::NODE_PARAM_FLAG_REST,
        "REST"
    },
    {
        as2js::Node::flag_t::NODE_PARAM_FLAG_UNCHECKED,
        "UNCHECKED"
    },
    {
        as2js::Node::flag_t::NODE_PARAM_FLAG_UNPROTOTYPED,
        "UNPROTOTYPED"
    },
    {
        as2js::Node::flag_t::NODE_PARAM_FLAG_REFERENCED,
        "REFERENCED"
    },
    {
        as2js::Node::flag_t::NODE_PARAM_FLAG_PARAMREF,
        "PARAMREF"
    },
    {
        as2js::Node::flag_t::NODE_PARAM_FLAG_CATCH,
        "CATCH"
    },
    {
        as2js::Node::flag_t::NODE_FLAG_max,
        nullptr
    }
};

flags_per_node_t const g_flags_switch[] =
{
    {
        as2js::Node::flag_t::NODE_SWITCH_FLAG_DEFAULT,
        "DEFAULT"
    },
    {
        as2js::Node::flag_t::NODE_FLAG_max,
        nullptr
    }
};

flags_per_node_t const g_flags_type[] =
{
    {
        as2js::Node::flag_t::NODE_TYPE_FLAG_MODULO,
        "MODULO"
    },
    {
        as2js::Node::flag_t::NODE_FLAG_max,
        nullptr
    }
};

flags_per_node_t const g_flags_variable[] =
{
    {
        as2js::Node::flag_t::NODE_VARIABLE_FLAG_CONST,
        "CONST"
    },
    {
        as2js::Node::flag_t::NODE_VARIABLE_FLAG_FINAL,
        "FINAL"
    },
    {
        as2js::Node::flag_t::NODE_VARIABLE_FLAG_LOCAL,
        "LOCAL"
    },
    {
        as2js::Node::flag_t::NODE_VARIABLE_FLAG_MEMBER,
        "MEMBER"
    },
    {
        as2js::Node::flag_t::NODE_VARIABLE_FLAG_ATTRIBUTES,
        "ATTRIBUTES"
    },
    {
        as2js::Node::flag_t::NODE_VARIABLE_FLAG_ENUM,
        "ENUM"
    },
    {
        as2js::Node::flag_t::NODE_VARIABLE_FLAG_COMPILED,
        "COMPILED"
    },
    {
        as2js::Node::flag_t::NODE_VARIABLE_FLAG_INUSE,
        "INUSE"
    },
    {
        as2js::Node::flag_t::NODE_VARIABLE_FLAG_ATTRS,
        "ATTRS"
    },
    {
        as2js::Node::flag_t::NODE_VARIABLE_FLAG_DEFINED,
        "DEFINED"
    },
    {
        as2js::Node::flag_t::NODE_VARIABLE_FLAG_DEFINING,
        "DEFINING"
    },
    {
        as2js::Node::flag_t::NODE_VARIABLE_FLAG_TOADD,
        "TOADD"
    },
    {
        as2js::Node::flag_t::NODE_FLAG_max,
        nullptr
    }
};




struct node_type_info_t
{
    as2js::Node::node_t         f_type;
    char const *                f_name;
    char const *                f_operator;
    uint64_t                    f_flags;
    flags_per_node_t const *    f_node_flags;
};


uint64_t const              TEST_NODE_IS_NUMBER          = 0x0000000000000001;
uint64_t const              TEST_NODE_IS_NAN             = 0x0000000000000002;
uint64_t const              TEST_NODE_IS_INT64           = 0x0000000000000004;
uint64_t const              TEST_NODE_IS_FLOAT64         = 0x0000000000000008;
uint64_t const              TEST_NODE_IS_BOOLEAN         = 0x0000000000000010;
uint64_t const              TEST_NODE_IS_TRUE            = 0x0000000000000020;
uint64_t const              TEST_NODE_IS_FALSE           = 0x0000000000000040;
uint64_t const              TEST_NODE_IS_STRING          = 0x0000000000000080;
uint64_t const              TEST_NODE_IS_UNDEFINED       = 0x0000000000000100;
uint64_t const              TEST_NODE_IS_NULL            = 0x0000000000000200;
uint64_t const              TEST_NODE_IS_IDENTIFIER      = 0x0000000000000400;
uint64_t const              TEST_NODE_ACCEPT_STRING      = 0x0000000000000800;
uint64_t const              TEST_NODE_HAS_SIDE_EFFECTS   = 0x0000000000001000;
uint64_t const              TEST_NODE_IS_PARAM_MATCH     = 0x0000000000002000;
uint64_t const              TEST_NODE_IS_SWITCH_OPERATOR = 0x0000000000004000;

// index from 0 to g_node_types_size - 1 to go through all the valid
// node types
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
// pedantic because the .<field_name> is not accepted by default in C++
node_type_info_t const g_node_types[] =
{
    {
        .f_type = as2js::Node::node_t::NODE_EOF,
        .f_name = "EOF",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_UNKNOWN,
        .f_name = "UNKNOWN",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_SWITCH_OPERATOR,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ADD,
        .f_name = "ADD",
        .f_operator = "+",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT,
        .f_name = "ASSIGNMENT",
        .f_operator = "=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_BITWISE_AND,
        .f_name = "BITWISE_AND",
        .f_operator = "&",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_BITWISE_NOT,
        .f_name = "BITWISE_NOT",
        .f_operator = "~",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_BITWISE_OR,
        .f_name = "BITWISE_OR",
        .f_operator = "|",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_BITWISE_XOR,
        .f_name = "BITWISE_XOR",
        .f_operator = "^",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_CLOSE_CURVLY_BRACKET,
        .f_name = "CLOSE_CURVLY_BRACKET",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_CLOSE_PARENTHESIS,
        .f_name = "CLOSE_PARENTHESIS",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_CLOSE_SQUARE_BRACKET,
        .f_name = "CLOSE_SQUARE_BRACKET",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_COLON,
        .f_name = "COLON",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_COMMA,
        .f_name = "COMMA",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_CONDITIONAL,
        .f_name = "CONDITIONAL",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_DIVIDE,
        .f_name = "DIVIDE",
        .f_operator = "/",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_GREATER,
        .f_name = "GREATER",
        .f_operator = ">",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_SWITCH_OPERATOR,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_LESS,
        .f_name = "LESS",
        .f_operator = "<",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_SWITCH_OPERATOR,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_LOGICAL_NOT,
        .f_name = "LOGICAL_NOT",
        .f_operator = "!",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_MODULO,
        .f_name = "MODULO",
        .f_operator = "%",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_MULTIPLY,
        .f_name = "MULTIPLY",
        .f_operator = "*",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_OPEN_CURVLY_BRACKET,
        .f_name = "OPEN_CURVLY_BRACKET",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_OPEN_PARENTHESIS,
        .f_name = "OPEN_PARENTHESIS",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_OPEN_SQUARE_BRACKET,
        .f_name = "OPEN_SQUARE_BRACKET",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_MEMBER,
        .f_name = "MEMBER",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_SEMICOLON,
        .f_name = "SEMICOLON",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_SUBTRACT,
        .f_name = "SUBTRACT",
        .f_operator = "-",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ABSTRACT,
        .f_name = "ABSTRACT",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ARRAY,
        .f_name = "ARRAY",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ARRAY_LITERAL,
        .f_name = "ARRAY_LITERAL",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_AS,
        .f_name = "AS",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_SWITCH_OPERATOR,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_ADD,
        .f_name = "ASSIGNMENT_ADD",
        .f_operator = "+=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_BITWISE_AND,
        .f_name = "ASSIGNMENT_BITWISE_AND",
        .f_operator = "&=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_BITWISE_OR,
        .f_name = "ASSIGNMENT_BITWISE_OR",
        .f_operator = "|=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_BITWISE_XOR,
        .f_name = "ASSIGNMENT_BITWISE_XOR",
        .f_operator = "^=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_DIVIDE,
        .f_name = "ASSIGNMENT_DIVIDE",
        .f_operator = "/=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_LOGICAL_AND,
        .f_name = "ASSIGNMENT_LOGICAL_AND",
        .f_operator = "&&=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_LOGICAL_OR,
        .f_name = "ASSIGNMENT_LOGICAL_OR",
        .f_operator = "||=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_LOGICAL_XOR,
        .f_name = "ASSIGNMENT_LOGICAL_XOR",
        .f_operator = "^^=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_MAXIMUM,
        .f_name = "ASSIGNMENT_MAXIMUM",
        .f_operator = ">?=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_MINIMUM,
        .f_name = "ASSIGNMENT_MINIMUM",
        .f_operator = "<?=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_MODULO,
        .f_name = "ASSIGNMENT_MODULO",
        .f_operator = "%=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_MULTIPLY,
        .f_name = "ASSIGNMENT_MULTIPLY",
        .f_operator = "*=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_POWER,
        .f_name = "ASSIGNMENT_POWER",
        .f_operator = "**=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_ROTATE_LEFT,
        .f_name = "ASSIGNMENT_ROTATE_LEFT",
        .f_operator = "<%=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_ROTATE_RIGHT,
        .f_name = "ASSIGNMENT_ROTATE_RIGHT",
        .f_operator = ">%=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_SHIFT_LEFT,
        .f_name = "ASSIGNMENT_SHIFT_LEFT",
        .f_operator = "<<=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_SHIFT_RIGHT,
        .f_name = "ASSIGNMENT_SHIFT_RIGHT",
        .f_operator = ">>=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_SHIFT_RIGHT_UNSIGNED,
        .f_name = "ASSIGNMENT_SHIFT_RIGHT_UNSIGNED",
        .f_operator = ">>>=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ASSIGNMENT_SUBTRACT,
        .f_name = "ASSIGNMENT_SUBTRACT",
        .f_operator = "-=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ATTRIBUTES,
        .f_name = "ATTRIBUTES",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_AUTO,
        .f_name = "AUTO",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_BOOLEAN,
        .f_name = "BOOLEAN",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_BREAK,
        .f_name = "BREAK",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_BYTE,
        .f_name = "BYTE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_CALL,
        .f_name = "CALL",
        .f_operator = "()",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_CASE,
        .f_name = "CASE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_CATCH,
        .f_name = "CATCH",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_catch
    },
    {
        .f_type = as2js::Node::node_t::NODE_CHAR,
        .f_name = "CHAR",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_CLASS,
        .f_name = "CLASS",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_identifier
    },
    {
        .f_type = as2js::Node::node_t::NODE_COMPARE,
        .f_name = "COMPARE",
        .f_operator = "<=>",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_CONST,
        .f_name = "CONST",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_CONTINUE,
        .f_name = "CONTINUE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_DEBUGGER,
        .f_name = "DEBUGGER",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_DECREMENT,
        .f_name = "DECREMENT",
        .f_operator = "--x",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_DEFAULT,
        .f_name = "DEFAULT",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_SWITCH_OPERATOR,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_DELETE,
        .f_name = "DELETE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_DIRECTIVE_LIST,
        .f_name = "DIRECTIVE_LIST",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_directive_list
    },
    {
        .f_type = as2js::Node::node_t::NODE_DO,
        .f_name = "DO",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_DOUBLE,
        .f_name = "DOUBLE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ELSE,
        .f_name = "ELSE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_EMPTY,
        .f_name = "EMPTY",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ENSURE,
        .f_name = "ENSURE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ENUM,
        .f_name = "ENUM",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_enum
    },
    {
        .f_type = as2js::Node::node_t::NODE_EQUAL,
        .f_name = "EQUAL",
        .f_operator = "==",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_SWITCH_OPERATOR,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_EXCLUDE,
        .f_name = "EXCLUDE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_EXTENDS,
        .f_name = "EXTENDS",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_EXPORT,
        .f_name = "EXPORT",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_FALSE,
        .f_name = "FALSE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_BOOLEAN | TEST_NODE_IS_FALSE,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_FINAL,
        .f_name = "FINAL",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_FINALLY,
        .f_name = "FINALLY",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_FLOAT,
        .f_name = "FLOAT",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_FLOAT64,
        .f_name = "FLOAT64",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NUMBER | TEST_NODE_IS_FLOAT64,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_FOR,
        .f_name = "FOR",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_for
    },
    {
        .f_type = as2js::Node::node_t::NODE_FUNCTION,
        .f_name = "FUNCTION",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_function
    },
    {
        .f_type = as2js::Node::node_t::NODE_GOTO,
        .f_name = "GOTO",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_GREATER_EQUAL,
        .f_name = "GREATER_EQUAL",
        .f_operator = ">=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_SWITCH_OPERATOR,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_IDENTIFIER,
        .f_name = "IDENTIFIER",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_IDENTIFIER | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_identifier
    },
    {
        .f_type = as2js::Node::node_t::NODE_IF,
        .f_name = "IF",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_IMPLEMENTS,
        .f_name = "IMPLEMENTS",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_IMPORT,
        .f_name = "IMPORT",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_import
    },
    {
        .f_type = as2js::Node::node_t::NODE_IN,
        .f_name = "IN",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_SWITCH_OPERATOR,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_INCLUDE,
        .f_name = "INCLUDE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_INCREMENT,
        .f_name = "INCREMENT",
        .f_operator = "++x",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_INLINE,
        .f_name = "INLINE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_INSTANCEOF,
        .f_name = "INSTANCEOF",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_SWITCH_OPERATOR,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_INT64,
        .f_name = "INT64",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NUMBER | TEST_NODE_IS_INT64,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_INTERFACE,
        .f_name = "INTERFACE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_INVARIANT,
        .f_name = "INVARIANT",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_IS,
        .f_name = "IS",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_SWITCH_OPERATOR,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_LABEL,
        .f_name = "LABEL",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_LESS_EQUAL,
        .f_name = "LESS_EQUAL",
        .f_operator = "<=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_SWITCH_OPERATOR,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_LIST,
        .f_name = "LIST",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_LOGICAL_AND,
        .f_name = "LOGICAL_AND",
        .f_operator = "&&",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_LOGICAL_OR,
        .f_name = "LOGICAL_OR",
        .f_operator = "||",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_LOGICAL_XOR,
        .f_name = "LOGICAL_XOR",
        .f_operator = "^^",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_LONG,
        .f_name = "LONG",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_MATCH,
        .f_name = "MATCH",
        .f_operator = "~=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_SWITCH_OPERATOR,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_MAXIMUM,
        .f_name = "MAXIMUM",
        .f_operator = ">?",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_MINIMUM,
        .f_name = "MINIMUM",
        .f_operator = "<?",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_NAME,
        .f_name = "NAME",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_NAMESPACE,
        .f_name = "NAMESPACE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_NATIVE,
        .f_name = "NATIVE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_NEW,
        .f_name = "NEW",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_NOT_EQUAL,
        .f_name = "NOT_EQUAL",
        .f_operator = "!=",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_SWITCH_OPERATOR,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_NOT_MATCH,
        .f_name = "NOT_MATCH",
        .f_operator = "!~",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_NULL,
        .f_name = "NULL",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NULL,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_OBJECT_LITERAL,
        .f_name = "OBJECT_LITERAL",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_PACKAGE,
        .f_name = "PACKAGE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_package
    },
    {
        .f_type = as2js::Node::node_t::NODE_PARAM,
        .f_name = "PARAM",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_param
    },
    {
        .f_type = as2js::Node::node_t::NODE_PARAMETERS,
        .f_name = "PARAMETERS",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_PARAM_MATCH,
        .f_name = "PARAM_MATCH",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_PARAM_MATCH,
        .f_node_flags = g_flags_param_match
    },
    {
        .f_type = as2js::Node::node_t::NODE_POST_DECREMENT,
        .f_name = "POST_DECREMENT",
        .f_operator = "x--",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_POST_INCREMENT,
        .f_name = "POST_INCREMENT",
        .f_operator = "x++",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_HAS_SIDE_EFFECTS,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_POWER,
        .f_name = "POWER",
        .f_operator = "**",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_PRIVATE,
        .f_name = "PRIVATE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_PROGRAM,
        .f_name = "PROGRAM",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_PROTECTED,
        .f_name = "PROTECTED",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_PUBLIC,
        .f_name = "PUBLIC",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_RANGE,
        .f_name = "RANGE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_REGULAR_EXPRESSION,
        .f_name = "REGULAR_EXPRESSION",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_REQUIRE,
        .f_name = "REQUIRE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_REST,
        .f_name = "REST",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_RETURN,
        .f_name = "RETURN",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ROOT,
        .f_name = "ROOT",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ROTATE_LEFT,
        .f_name = "ROTATE_LEFT",
        .f_operator = "<%",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_ROTATE_RIGHT,
        .f_name = "ROTATE_RIGHT",
        .f_operator = ">%",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_SCOPE,
        .f_name = "SCOPE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_SET,
        .f_name = "SET",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_SHIFT_LEFT,
        .f_name = "SHIFT_LEFT",
        .f_operator = "<<",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_SHIFT_RIGHT,
        .f_name = "SHIFT_RIGHT",
        .f_operator = ">>",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_SHIFT_RIGHT_UNSIGNED,
        .f_name = "SHIFT_RIGHT_UNSIGNED",
        .f_operator = ">>>",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_SHORT,
        .f_name = "SHORT",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_SMART_MATCH,
        .f_name = "SMART_MATCH",
        .f_operator = "~~",
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_STATIC,
        .f_name = "STATIC",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_STRICTLY_EQUAL,
        .f_name = "STRICTLY_EQUAL",
        .f_operator = "===",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_SWITCH_OPERATOR,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_STRICTLY_NOT_EQUAL,
        .f_name = "STRICTLY_NOT_EQUAL",
        .f_operator = "!==",
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_SWITCH_OPERATOR,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_STRING,
        .f_name = "STRING",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_STRING | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_identifier
    },
    {
        .f_type = as2js::Node::node_t::NODE_SUPER,
        .f_name = "SUPER",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_SWITCH,
        .f_name = "SWITCH",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_switch
    },
    {
        .f_type = as2js::Node::node_t::NODE_SYNCHRONIZED,
        .f_name = "SYNCHRONIZED",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_THEN,
        .f_name = "THEN",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_THIS,
        .f_name = "THIS",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_THROW,
        .f_name = "THROW",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_THROWS,
        .f_name = "THROWS",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_TRANSIENT,
        .f_name = "TRANSIENT",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_TRUE,
        .f_name = "TRUE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_BOOLEAN | TEST_NODE_IS_TRUE,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_TRY,
        .f_name = "TRY",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_TYPE,
        .f_name = "TYPE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_type
    },
    {
        .f_type = as2js::Node::node_t::NODE_TYPEOF,
        .f_name = "TYPEOF",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_UNDEFINED,
        .f_name = "UNDEFINED",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_UNDEFINED,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_USE,
        .f_name = "USE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_VAR,
        .f_name = "VAR",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_VARIABLE,
        .f_name = "VARIABLE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_variable
    },
    {
        .f_type = as2js::Node::node_t::NODE_VAR_ATTRIBUTES,
        .f_name = "VAR_ATTRIBUTES",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_variable
    },
    {
        .f_type = as2js::Node::node_t::NODE_VIDENTIFIER,
        .f_name = "VIDENTIFIER",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN | TEST_NODE_IS_IDENTIFIER | TEST_NODE_ACCEPT_STRING,
        .f_node_flags = g_flags_identifier
    },
    {
        .f_type = as2js::Node::node_t::NODE_VOID,
        .f_name = "VOID",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_VOLATILE,
        .f_name = "VOLATILE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_WHILE,
        .f_name = "WHILE",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_WITH,
        .f_name = "WITH",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    },
    {
        .f_type = as2js::Node::node_t::NODE_YIELD,
        .f_name = "YIELD",
        .f_operator = nullptr,
        .f_flags = TEST_NODE_IS_NAN,
        .f_node_flags = g_flags_none
    }
};
#pragma GCC diagnostic pop
size_t const g_node_types_size(sizeof(g_node_types) / sizeof(g_node_types[0]));



char const *g_attribute_names[static_cast<int>(as2js::Node::attribute_t::NODE_ATTR_max)] =
{
    "PUBLIC",
    "PRIVATE",
    "PROTECTED",
    "INTERNAL",
    "TRANSIENT",
    "VOLATILE",
    "STATIC",
    "ABSTRACT",
    "VIRTUAL",
    "ARRAY",
    "INLINE",
    "REQUIRE_ELSE",
    "ENSURE_THEN",
    "NATIVE",
    "DEPRECATED",
    "UNSAFE",
    "CONSTRUCTOR",
    "FINAL",
    "ENUMERABLE",
    "TRUE",
    "FALSE",
    "UNUSED",
    "DYNAMIC",
    "FOREACH",
    "NOBREAK",
    "AUTOBREAK",
    "TYPE",
    "DEFINED"
};

as2js::Node::attribute_t const g_group_member_visibility[] =
{
    as2js::Node::attribute_t::NODE_ATTR_PRIVATE,
    as2js::Node::attribute_t::NODE_ATTR_PROTECTED,
    as2js::Node::attribute_t::NODE_ATTR_PUBLIC,
    as2js::Node::attribute_t::NODE_ATTR_max // end the list
};

as2js::Node::attribute_t const g_group_function_type[] =
{
    as2js::Node::attribute_t::NODE_ATTR_ABSTRACT,
    as2js::Node::attribute_t::NODE_ATTR_CONSTRUCTOR,
    as2js::Node::attribute_t::NODE_ATTR_STATIC,
    as2js::Node::attribute_t::NODE_ATTR_VIRTUAL,
    as2js::Node::attribute_t::NODE_ATTR_max // end the list
};

as2js::Node::attribute_t const g_group_function_contract[] =
{
    as2js::Node::attribute_t::NODE_ATTR_REQUIRE_ELSE,
    as2js::Node::attribute_t::NODE_ATTR_ENSURE_THEN,
    as2js::Node::attribute_t::NODE_ATTR_max // end the list
};

as2js::Node::attribute_t const g_group_switch_type[] =
{
    as2js::Node::attribute_t::NODE_ATTR_FOREACH,
    as2js::Node::attribute_t::NODE_ATTR_NOBREAK,
    as2js::Node::attribute_t::NODE_ATTR_AUTOBREAK,
    as2js::Node::attribute_t::NODE_ATTR_max // end the list
};

as2js::Node::attribute_t const g_group_conditional_compilation[] =
{
    as2js::Node::attribute_t::NODE_ATTR_TRUE,
    as2js::Node::attribute_t::NODE_ATTR_FALSE,
    as2js::Node::attribute_t::NODE_ATTR_max // end the list
};

struct groups_attributes_t
{
    as2js::Node::attribute_t const *    f_attributes;
    char const *                        f_names;
};

groups_attributes_t const g_groups_of_attributes[] =
{
    {
        g_group_member_visibility,
        "public, private, and protected"
    },
    {
        g_group_function_type,
        "abstract, constructor, inline, native, static, and virtual"
    },
    {
        g_group_function_contract,
        "require else and ensure then"
    },
    {
        g_group_switch_type,
        "foreach, nobreak, and autobreak"
    },
    {
        g_group_conditional_compilation,
        "true and false"
    }
};
size_t const g_groups_of_attributes_size(sizeof(g_groups_of_attributes) / sizeof(g_groups_of_attributes[0]));




class test_callback : public as2js::MessageCallback
{
public:
    test_callback()
    {
        as2js::Message::set_message_callback(this);
        g_warning_count = as2js::Message::warning_count();
        g_error_count = as2js::Message::error_count();
    }

    ~test_callback()
    {
        // make sure the pointer gets reset!
        as2js::Message::set_message_callback(nullptr);
    }

    // implementation of the output
    virtual void output(as2js::message_level_t message_level, as2js::err_code_t error_code, as2js::Position const& pos, std::string const& message)
    {

//std::cerr<< "\nmsg = " << pos.get_filename() << " / " << f_expected_pos.get_filename() << "\n";

        CPPUNIT_ASSERT(f_expected_call);
        CPPUNIT_ASSERT(message_level == f_expected_message_level);
        CPPUNIT_ASSERT(error_code == f_expected_error_code);
        CPPUNIT_ASSERT(pos.get_filename() == f_expected_pos.get_filename());
        CPPUNIT_ASSERT(pos.get_function() == f_expected_pos.get_function());
        CPPUNIT_ASSERT(pos.get_page() == f_expected_pos.get_page());
        CPPUNIT_ASSERT(pos.get_page_line() == f_expected_pos.get_page_line());
        CPPUNIT_ASSERT(pos.get_paragraph() == f_expected_pos.get_paragraph());
        CPPUNIT_ASSERT(pos.get_line() == f_expected_pos.get_line());
        CPPUNIT_ASSERT(message == f_expected_message);

        if(message_level == as2js::message_level_t::MESSAGE_LEVEL_WARNING)
        {
            ++g_warning_count;
            CPPUNIT_ASSERT(g_warning_count == as2js::Message::warning_count());
        }

        if(message_level == as2js::message_level_t::MESSAGE_LEVEL_FATAL
        || message_level == as2js::message_level_t::MESSAGE_LEVEL_ERROR)
        {
            ++g_error_count;
//std::cerr << "error: " << g_error_count << " / " << as2js::Message::error_count() << "\n";
            CPPUNIT_ASSERT(g_error_count == as2js::Message::error_count());
        }

        f_got_called = true;
    }

    bool                        f_expected_call = true;
    bool                        f_got_called = false;
    as2js::message_level_t      f_expected_message_level = as2js::message_level_t::MESSAGE_LEVEL_OFF;
    as2js::err_code_t           f_expected_error_code = as2js::err_code_t::AS_ERR_NONE;
    as2js::Position             f_expected_pos;
    std::string                 f_expected_message; // UTF-8 string

    static int32_t              g_warning_count;
    static int32_t              g_error_count;
};

int32_t   test_callback::g_warning_count = 0;
int32_t   test_callback::g_error_count = 0;


void output_str(std::ostream & out, as2js::String str)
{
    as2js::raii_stream_flags stream_flags(out);

    out << ": '";
    for(as2js::as_char_t const *s(str.c_str()); *s != '\0'; ++s)
    {
        if(*s < 0x20)
        {
            // show controls as ^<letter>
            out << '^' << static_cast<char>(*s + '@');
        }
        else if(*s < 0x7f)
        {
            if(*s == '\'')
            {
                out << "\\'";
            }
            else
            {
                out << static_cast<char>(*s);
            }
        }
        else if(*s < 0x100)
        {
            out << "\\x" << std::hex << *s;
        }
        else if(*s < 0x10000)
        {
            out << "\\u" << std::hex << std::setfill('0') << std::setw(4) << *s;
        }
        else
        {
            out << "\\U" << std::hex << std::setfill('0') << std::setw(8) << *s;
        }
    }
    out << "'";
}


}
// no name namespace




// vim: ts=4 sw=4 et
