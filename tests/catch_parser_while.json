// start
[
 
    // While with a broken block
    {
        //"verbose": true,
        "name": "'while' with a broken block",
        "program": "while(a ? a.color : false) { a.color = rand(seed: 33);",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' expected to close a block."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "WHILE",
                            "children": [
                                {
                                    "node type": "CONDITIONAL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "MEMBER",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "color"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FALSE"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ASSIGNMENT",
                                                    "children": [
                                                        {
                                                            "node type": "MEMBER",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "a"
                                                                },
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "color"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "node type": "CALL",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "rand"
                                                                },
                                                                {
                                                                    "node type": "LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "NAME",
                                                                            "label": "seed",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 33
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // While with a broken block case 2
    {
        //"verbose": true,
        "name": "'while' with a broken block v2",
        "program": "while(a ? a.color : false) a.color = rand(seed: 33)",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'WHILE' block."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 1,
                "message": "';' was expected after 'MEMBER' (current token: 'EOF')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "WHILE",
                            "children": [
                                {
                                    "node type": "CONDITIONAL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "MEMBER",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "color"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FALSE"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "CALL",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "rand"
                                                        },
                                                        {
                                                            "node type": "LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "NAME",
                                                                    "label": "seed",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 33
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // While with a broken block case 3
    {
        //"verbose": true,
        "name": "'while' with a broken block v3",
        "program": "while(a ? a.color : false) a.color = rand(seed: 33) }",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'WHILE' block."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' not expected without a '{'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "WHILE",
                            "children": [
                                {
                                    "node type": "CONDITIONAL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "MEMBER",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "color"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FALSE"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "CALL",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "rand"
                                                        },
                                                        {
                                                            "node type": "LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "NAME",
                                                                    "label": "seed",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 33
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // While with a broken block case 4
    {
        //"verbose": true,
        "name": "'while' with a broken block v4",
        "program": "while(a ? a.color : false) a.color = rand(seed: 33); volatile",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'WHILE' block."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "UNEXPECTED_EOF",
                "line #": 1,
                "message": "unexpected end of file reached."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "WHILE",
                            "children": [
                                {
                                    "node type": "CONDITIONAL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "MEMBER",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "color"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FALSE"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "CALL",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "rand"
                                                        },
                                                        {
                                                            "node type": "LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "NAME",
                                                                    "label": "seed",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 33
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // While with a broken block case 5
    {
        //"verbose": true,
        "name": "'while' with a broken block v5",
        "program": "while(a ? a.color : false) a.color = rand(seed: 33); volatile }",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'WHILE' block."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            //{
            //    "message level": 2,
            //    "error code": "CURVLY_BRACKETS_EXPECTED",
            //    "line #": 1,
            //    "message": "unexpected '}'."
            //},
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'}' not expected without a '{'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "WHILE",
                            "children": [
                                {
                                    "node type": "CONDITIONAL",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "a"
                                        },
                                        {
                                            "node type": "MEMBER",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "color"
                                                }
                                            ]
                                        },
                                        {
                                            "node type": "FALSE"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "ASSIGNMENT",
                                            "children": [
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "color"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "CALL",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "rand"
                                                        },
                                                        {
                                                            "node type": "LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "NAME",
                                                                    "label": "seed",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 33
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // do without a while
    {
        //"verbose": true,
        "slow": true,
        "name": "do loop without a while",
        "program": "do\n\
for(var a = 1; a <= 10; ++a)\n\
console.log(a);\n\
\n",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'{' expected to open the 'DO' block."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 2,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 3,
                "message": "'{' expected to open the 'FOR' block."
            },
            {
                "message level": 2,
                "error code": "INVALID_DO",
                "line #": 5,
                "message": "'while' expected after the block of a 'do' keyword."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 5,
                "message": "';' was expected after 'DO' (current token: 'EOF')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DO",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FOR",
                                            "children": [
                                                {
                                                    "node type": "VAR",
                                                    "children": [
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "a",
                                                            "children": [
                                                                {
                                                                    "node type": "SET",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 1
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "LESS_EQUAL",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        },
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 10
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "INCREMENT",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "a"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "CALL",
                                                            "children": [
                                                                {
                                                                    "node type": "MEMBER",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "console"
                                                                        },
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "log"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "a"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // do with a while missing the '('
    {
        //"verbose": true,
        "slow": true,
        "name": "do loop with its while missing '('",
        "program": "do\n\
for(var a in obj)\n\
console.log(a);\n\
while repeat);\n",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'{' expected to open the 'DO' block."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 3,
                "message": "'{' expected to open the 'FOR' block."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 4,
                "message": "'(' expected after the 'while' keyword."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 4,
                "message": "';' was expected after 'DO' (current token: 'IDENTIFIER')."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DO",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FOR",
                                            "flags": "FOR_FLAG_IN",
                                            "children": [
                                                {
                                                    "node type": "VAR",
                                                    "children": [
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "a"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "obj"
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "CALL",
                                                            "children": [
                                                                {
                                                                    "node type": "MEMBER",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "console"
                                                                        },
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "log"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "a"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // do with a while missing the '('
    {
        //"verbose": true,
        "slow": true,
        "name": "do loop with its while missing ')'",
        "program": "do\n\
for each(const var a in obj)\n\
console.log(a);\n\
while(repeat;\n",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'{' expected to open the 'DO' block."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 3,
                "message": "'{' expected to open the 'FOR' block."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 4,
                "message": "')' expected to end the 'while' expression."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DO",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "FOR",
                                            "flags": "FOR_FLAG_CONST,FOR_FLAG_FOREACH,FOR_FLAG_IN",
                                            "children": [
                                                {
                                                    "node type": "VAR",
                                                    "children": [
                                                        {
                                                            "node type": "VARIABLE",
                                                            "label": "a",
                                                            "flags": "VARIABLE_FLAG_CONST"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "obj"
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "CALL",
                                                            "children": [
                                                                {
                                                                    "node type": "MEMBER",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "console"
                                                                        },
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "log"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "node type": "LIST",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "a"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "repeat"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // do with a while missing the '('
    {
        //"verbose": true,
        "slow": true,
        "name": "invalid while loops",
        "program": "repeat:\n\
while !done)\n\
{ z := a ~~ (b).field; }\n\
while(!done\n\
{ z = ~~b; }\n\
with obj)\n\
{ z += a !~ (b)[\"field\"]; }\n\
with(my_object\n\
{ last <<= !~one; }\n\
goto repeat;\n\
",
        "expected messages": [
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 2,
                "message": "'(' expected after the 'while' keyword."
            },
            {
                "message level": 2,
                "error code": "SEMICOLON_EXPECTED",
                "line #": 2,
                "message": "';' was expected after 'LOGICAL_NOT' (current token: 'CLOSE_PARENTHESIS')."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "the ':=' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "the 'SMART_MATCH' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 5,
                "message": "')' expected to end the 'while' expression."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 5,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_allow_with|no_strict",
                "message level": 2,
                "error code": "NOT_ALLOWED_IN_STRICT_MODE",
                "line #": 6,
                "message": "'WITH' is not allowed in strict mode."
            },
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 6,
                "message": "'WITH' is not allowed; you may authorize it with a pragam (use allow_with;) but it is not recommended."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 6,
                "message": "'(' expected after the 'with' keyword."
            },
            {
                "message level": 2,
                "error code": "INVALID_OPERATOR",
                "line #": 6,
                "message": "unexpected operator 'CLOSE_PARENTHESIS'."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 7,
                "message": "the 'NOT_MATCH' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "no_allow_with|no_strict",
                "message level": 2,
                "error code": "NOT_ALLOWED_IN_STRICT_MODE",
                "line #": 8,
                "message": "'WITH' is not allowed in strict mode."
            },
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 8,
                "message": "'WITH' is not allowed; you may authorize it with a pragam (use allow_with;) but it is not recommended."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 9,
                "message": "')' expected to end the 'with' expression."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "LABEL",
                            "label": "repeat"
                        },
                        {
                            "node type": "LOGICAL_NOT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "done"
                                }
                            ]
                        },
                        {
                            "node type": "DIRECTIVE_LIST",
                            "children": [
                                {
                                    "node type": "ASSIGNMENT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "z"
                                        },
                                        {
                                            "node type": "SMART_MATCH",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "MEMBER",
                                                    "children": [
                                                        {
                                                            "node type": "VIDENTIFIER",
                                                            "label": "b"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "field"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "WHILE",
                            "children": [
                                {
                                    "node type": "LOGICAL_NOT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "done"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ASSIGNMENT",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "z"
                                                        },
                                                        {
                                                            "node type": "BITWISE_NOT",
                                                            "children": [
                                                                {
                                                                    "node type": "BITWISE_NOT",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "b"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "DIRECTIVE_LIST",
                            "children": [
                                {
                                    "node type": "ASSIGNMENT_ADD",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "z"
                                        },
                                        {
                                            "node type": "NOT_MATCH",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "ARRAY",
                                                    "children": [
                                                        {
                                                            "node type": "VIDENTIFIER",
                                                            "label": "b"
                                                        },
                                                        {
                                                            "node type": "STRING",
                                                            "label": "field"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "WITH",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "my_object"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "DIRECTIVE_LIST",
                                            "children": [
                                                {
                                                    "node type": "ASSIGNMENT_SHIFT_LEFT",
                                                    "children": [
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "last"
                                                        },
                                                        {
                                                            "node type": "LOGICAL_NOT",
                                                            "children": [
                                                                {
                                                                    "node type": "BITWISE_NOT",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "one"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "GOTO",
                            "label": "repeat"
                        }
                    ]
                }
            ]
        }
    },

    // illegal keywords in statements
    {
        //"verbose": true,
        //"slow": true,
        "name": "illegal keywords in statements",
        "program": "for(i = 0; i < 100; ++i) else;\n\
while(v) ensure;\n\
do extends while(q);\n\
if(s) require;\n\
with(obj) then;\n",
        "expected messages": [
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 1,
                "message": "'{' expected to open the 'FOR' block."
            },
            {
                "message level": 2,
                "error code": "INVALID_KEYWORD",
                "line #": 1,
                "message": "unexpected keyword 'ELSE'."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'{' expected to open the 'WHILE' block."
            },
            {
                "message level": 2,
                "error code": "INVALID_KEYWORD",
                "line #": 2,
                "message": "unexpected keyword 'ENSURE'."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 3,
                "message": "'{' expected to open the 'DO' block."
            },
            {
                "message level": 2,
                "error code": "INVALID_KEYWORD",
                "line #": 3,
                "message": "unexpected keyword 'EXTENDS'."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 4,
                "message": "'{' expected to open the 'IF' block."
            },
            {
                "message level": 2,
                "error code": "INVALID_KEYWORD",
                "line #": 4,
                "message": "unexpected keyword 'REQUIRE'."
            },
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 5,
                "message": "'WITH' is not allowed; you may authorize it with a pragam (use allow_with;) but it is not recommended."
            },
            {
                "options": "no_allow_with|no_strict",
                "message level": 2,
                "error code": "NOT_ALLOWED_IN_STRICT_MODE",
                "line #": 5,
                "message": "'WITH' is not allowed in strict mode."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 5,
                "message": "'{' expected to open the 'WITH' block."
            },
            {
                "message level": 2,
                "error code": "INVALID_KEYWORD",
                "line #": 5,
                "message": "unexpected keyword 'THEN'."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "FOR",
                            "children": [
                                {
                                    "node type": "ASSIGNMENT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "i"
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 0
                                        }
                                    ]
                                },
                                {
                                    "node type": "LESS",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "i"
                                        },
                                        {
                                            "node type": "INT64",
                                            "integer": 100
                                        }
                                    ]
                                },
                                {
                                    "node type": "INCREMENT",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "i"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST"
                                }
                            ]
                        },
                        {
                            "node type": "WHILE",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "v"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST"
                                }
                            ]
                        },
                        {
                            "node type": "DO",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST"
                                },
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "q"
                                }
                            ]
                        },
                        {
                            "node type": "IF",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "s"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST"
                                }
                            ]
                        },
                        {
                            "node type": "WITH",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "obj"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }

]
// end
// vim: ts=4 sw=4 et
