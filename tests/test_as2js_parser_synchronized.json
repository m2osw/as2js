// start
[
 
    // synchronized statement
    {
        //"verbose": true,
        "name": "synchronized statements",
        "program": "synchronized(some_var)\n\
{\n\
with(some_var)\n\
    attach = rand();\n\
}\n",
        "expected messages": [
            {
                "options": "allow_with",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 3,
                "message": "'WITH' is not allowed; you may authorize it with a pragam (use allow_with;) but it is not recommended."
            },
            {
                "options": "no_allow_with|no_strict",
                "message level": 2,
                "error code": "NOT_ALLOWED_IN_STRICT_MODE",
                "line #": 3,
                "message": "'WITH' is not allowed in strict mode."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 4,
                "message": "'{' expected to open the 'WITH' block."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 4,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "SYNCHRONIZED",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "some_var"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "WITH",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "some_var"
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "ASSIGNMENT",
                                                            "children": [
                                                                {
                                                                    "node type": "IDENTIFIER",
                                                                    "label": "attach"
                                                                },
                                                                {
                                                                    "node type": "CALL",
                                                                    "children": [
                                                                        {
                                                                            "node type": "IDENTIFIER",
                                                                            "label": "rand"
                                                                        },
                                                                        {
                                                                            "node type": "LIST"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // for larger to smaller
    {
        //"verbose": true,
        "name": "synchronized errors",
        "program": "synchronized { return !private::error; }\n\
synchronized(oops { return public::servent; }\n\
synchronized(good) wrong;\n",
        "expected messages": [
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 1,
                "message": "'(' expected after the 'synchronized' keyword."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the 'PRIVATE' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 1,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 2,
                "message": "')' expected to end the 'synchronized' expression."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 2,
                "message": "the 'PUBLIC' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 2,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            },
            {
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 3,
                "message": "'{' expected after the 'synchronized' expression."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DIRECTIVE_LIST",
                            "children": [
                                {
                                    "node type": "RETURN",
                                    "children": [
                                        {
                                            "node type": "LOGICAL_NOT",
                                            "children": [
                                                {
                                                    "node type": "SCOPE",
                                                    "children": [
                                                        {
                                                            "node type": "PRIVATE"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "error"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "SYNCHRONIZED",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "oops"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "RETURN",
                                            "children": [
                                                {
                                                    "node type": "SCOPE",
                                                    "children": [
                                                        {
                                                            "node type": "PUBLIC"
                                                        },
                                                        {
                                                            "node type": "IDENTIFIER",
                                                            "label": "servent"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "SYNCHRONIZED",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "good"
                                }
                            ]
                        },
                        {
                            "node type": "IDENTIFIER",
                            "label": "wrong"
                        }
                    ]
                }
            ]
        }
    }

]
// end
// vim: ts=4 sw=4 et
