// start
[
 
    // if/else and goto
    {
        //"verbose": true,
        "slow": true,
        "name": "valid and invalid if/else and goto",
        "program": "if(a)\n\
goto over_there;\n\
else if(b\n\
{ return (((111))); }\n\
else if c)\n\
q = z || f(33, );\n\
goto;\n",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'{' expected to open the 'IF' block."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 3,
                "message": "'{' expected to open the 'IF' block."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 4,
                "message": "')' expected to end the 'if' expression."
            },
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 5,
                "message": "'{' expected to open the 'IF' block."
            },
            {
                "message level": 2,
                "error code": "PARENTHESIS_EXPECTED",
                "line #": 5,
                "message": "'(' expected after the 'if' keyword."
            },
            {
                "message level": 2,
                "error code": "INVALID_OPERATOR",
                "line #": 5,
                "message": "unexpected operator 'CLOSE_PARENTHESIS'."
            },
            {
                "options": "no_extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 6,
                "message": "the '=' operator is not available when extended operators value bit 1 is set (use extended_operators(2);)."
            },
            {
                "message level": 2,
                "error code": "INVALID_EXPRESSION",
                "line #": 6,
                "message": "unexpected token 'CLOSE_PARENTHESIS' found in an expression."
            },
            {
                "message level": 2,
                "error code": "INVALID_GOTO",
                "line #": 7,
                "message": "'goto' expects a label as parameter."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "IF",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "a"
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "GOTO",
                                            "label": "over_there"
                                        }
                                    ]
                                },
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "IF",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "b"
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "DIRECTIVE_LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "RETURN",
                                                                    "children": [
                                                                        {
                                                                            "node type": "INT64",
                                                                            "integer": 111
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "node type": "ASSIGNMENT",
                            "children": [
                                {
                                    "node type": "IDENTIFIER",
                                    "label": "q"
                                },
                                {
                                    "node type": "LOGICAL_OR",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "z"
                                        },
                                        {
                                            "node type": "CALL",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "f"
                                                },
                                                {
                                                    "node type": "LIST",
                                                    "children": [
                                                        {
                                                            "node type": "INT64",
                                                            "integer": 33
                                                        },
                                                        {
                                                            "node type": "FALSE"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },

    // if(a) <missing block> else <block>
    {
        //"verbose": true,
        "slow": true,
        "name": "if without a block before the else inside a do/while loop",
        "program": "do\n\
if(a)\n\
else\n\
{ return { (a.extension_name + '.red')::empower: first, 32: second, 1.141:third, \"blue\": forth }; }\n\
while(q.loop);\n",
        "expected messages": [
            {
                "options": "no_extended_statements_safe",
                "message level": 2,
                "error code": "CURVLY_BRACKETS_EXPECTED",
                "line #": 2,
                "message": "'{' expected to open the 'DO' block."
            },
            {
                "message level": 2,
                "error code": "IMPROPER_STATEMENT",
                "line #": 4,
                "message": "statements expected following the 'if' expression, 'else' found instead."
            },
            {
                "options": "extended_operators|extended_operators_safe",
                "message level": 2,
                "error code": "NOT_ALLOWED",
                "line #": 4,
                "message": "the '::' operator is only available when extended operators are authorized (use extended_operators;)."
            }
        ],
        "result": {
            "node type": "PROGRAM",
            "children": [
                {
                    "node type": "DIRECTIVE_LIST",
                    "children": [
                        {
                            "node type": "DO",
                            "children": [
                                {
                                    "node type": "DIRECTIVE_LIST",
                                    "children": [
                                        {
                                            "node type": "IF",
                                            "children": [
                                                {
                                                    "node type": "IDENTIFIER",
                                                    "label": "a"
                                                },
                                                {
                                                    "node type": "DIRECTIVE_LIST",
                                                    "children": [
                                                        {
                                                            "node type": "DIRECTIVE_LIST",
                                                            "children": [
                                                                {
                                                                    "node type": "RETURN",
                                                                    "children": [
                                                                        {
                                                                            "node type": "OBJECT_LITERAL",
                                                                            "children": [
                                                                                {
                                                                                    "node type": "NAME",
                                                                                    "label": "",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "ADD",
                                                                                            "children": [
                                                                                                {
                                                                                                    "node type": "MEMBER",
                                                                                                    "children": [
                                                                                                        {
                                                                                                            "node type": "IDENTIFIER",
                                                                                                            "label": "a"
                                                                                                        },
                                                                                                        {
                                                                                                            "node type": "IDENTIFIER",
                                                                                                            "label": "extension_name"
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "node type": "STRING",
                                                                                                    "label": ".red"
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "empower"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "first"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "INT64",
                                                                                    "integer": 32
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "second"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "FLOAT64",
                                                                                    "float": 1.141
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "third"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "node type": "STRING",
                                                                                    "label": "blue"
                                                                                },
                                                                                {
                                                                                    "node type": "SET",
                                                                                    "children": [
                                                                                        {
                                                                                            "node type": "IDENTIFIER",
                                                                                            "label": "forth"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "node type": "MEMBER",
                                    "children": [
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "q"
                                        },
                                        {
                                            "node type": "IDENTIFIER",
                                            "label": "loop"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    }

]
// end
// vim: ts=4 sw=4 et
