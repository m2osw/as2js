/* optimizer_logical.ci -- written by Alexis WILKE for Made to Order Software Corp. (c) 2005-2017 */

/*

Copyright (c) 2005-2017 Made to Order Software Corp.

http://snapwebsites.org/project/as2js

Permission is hereby granted, free of charge, to any
person obtaining a copy of this software and
associated documentation files (the "Software"), to
deal in the Software without restriction, including
without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

/** \file
 * \brief Optimizations applied against logical operators.
 *
 * This files defines variable optimizations applied to logical operators
 * such as '!!!a' which can safely become '!a', or '!true' which gets
 * optimized to 'false'.
 */


namespace as2js
{
namespace optimizer_details
{


/** \brief Match '!true'
 *
 * This table defines a match for the expression '!true'.
 */
optimization_match_t const g_optimizer_logical_match_not_literal[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_not),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'true && a'
 *
 * This table defines a match for the expression 'true && a'.
 */
optimization_match_t const g_optimizer_logical_match_true_and_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_and),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_true_literals),
            /* f_with_value */          g_optimizer_value_true,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'false && a'
 *
 * This table defines a match for the expression 'false && a'.
 */
optimization_match_t const g_optimizer_logical_match_false_and_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_and),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_false_literals),
            /* f_with_value */          g_optimizer_value_false,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


///** \brief Match 'a && false'
// *
// * This table defines a match for the expression 'a && false'.
// *
// * In this case we can just return false unless 'a' has possible
// * side effects.
// *
// * This is incorrect because if 'a' is false the expression returns 'a'.
// */
//optimization_match_t const g_optimizer_logical_match_a_and_false[] =
//{
//    {
//        /* f_depth */               0,
//        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
//        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_and),
//        /* f_with_value */          nullptr,
//        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
//        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
//    },
//
//        {
//            /* f_depth */               1,
//            /* f_match_flags */         0,
//            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
//            /* f_with_value */          g_optimizer_value_no_side_effects,
//            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
//            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
//        },
//
//        {
//            /* f_depth */               1,
//            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
//            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_false_literals),
//            /* f_with_value */          g_optimizer_value_false,
//            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
//            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
//        }
//};


/** \brief Match 'a && b || c'
 *
 * This table defines a match for the expression 'a && b || c'.
 */
optimization_match_t const g_optimizer_logical_match_a_and_b_or_c[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_or),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_and),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

            {
                /* f_depth */               2,
                /* f_match_flags */         0,
                /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
                /* f_with_value */          nullptr,
                /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
                /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
            },

            {
                /* f_depth */               2,
                /* f_match_flags */         0,
                /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
                /* f_with_value */          nullptr,
                /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
                /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
            },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'true || a'
 *
 * This table defines a match for the expression 'true || a'.
 */
optimization_match_t const g_optimizer_logical_match_true_or_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_or),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_true_literals),
            /* f_with_value */          g_optimizer_value_true,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'false || a'
 *
 * This table defines a match for the expression 'false || a'.
 */
optimization_match_t const g_optimizer_logical_match_false_or_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_or),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_false_literals),
            /* f_with_value */          g_optimizer_value_false,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'literal ^^ literal'
 *
 * This table defines a match for the expression 'literal ^^ literal'.
 */
optimization_match_t const g_optimizer_logical_match_boolean_literal_or_boolean_literal[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_xor),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'if(!!a)' or 'while(!!a)'
 *
 * This table defines a match for the expression 'if(!!a)' or 'while(!!a)'.
 */
optimization_match_t const g_optimizer_logical_match_if_while_not_not_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_if_or_while),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_not),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

            {
                /* f_depth */               2,
                /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
                /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_not),
                /* f_with_value */          nullptr,
                /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
                /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
            },

                {
                    /* f_depth */               3,
                    /* f_match_flags */         0,
                    /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
                    /* f_with_value */          nullptr,
                    /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
                    /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
                },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'if(!a) b else c'.
 *
 * This table defines a match for the expression 'if(!a) b else c'.
 */
optimization_match_t const g_optimizer_logical_match_if_logical_not_else[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_if),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        { // !a
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_not),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

            {
                /* f_depth */               2,
                /* f_match_flags */         0,
                /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
                /* f_with_value */          nullptr,
                /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
                /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
            },

        { // b
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        { // c
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'for(a; !!b; c) d'.
 *
 * This table defines a match for the expression 'for(a; !!b; c) d' because
 * it can be optimized to 'for(a; b; c) d'.
 */
optimization_match_t const g_optimizer_logical_match_for_not_not_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_for),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        { // a
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        { // !!b
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_not),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

            {
                /* f_depth */               2,
                /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
                /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_not),
                /* f_with_value */          nullptr,
                /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
                /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
            },

                {
                    /* f_depth */               3,
                    /* f_match_flags */         0,
                    /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
                    /* f_with_value */          nullptr,
                    /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
                    /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
                },

        { // c
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        { // d
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match '!!a ? b : c'
 *
 * This table defines a match for the expression '!!a ? b : c'.
 */
optimization_match_t const g_optimizer_logical_match_conditional_not_not_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_conditional),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        { // !!a
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_not),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

            {
                /* f_depth */               2,
                /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
                /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_not),
                /* f_with_value */          nullptr,
                /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
                /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
            },

                {
                    /* f_depth */               3,
                    /* f_match_flags */         0,
                    /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
                    /* f_with_value */          nullptr,
                    /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
                    /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
                },

        { // b
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        { // c
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match '!!!a'
 *
 * This table defines a match for the expression '!!!a', where 'a' can
 * be anything at all.
 */
optimization_match_t const g_optimizer_logical_match_not_not_not_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_not),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_not),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

            {
                /* f_depth */               2,
                /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
                /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_logical_not),
                /* f_with_value */          nullptr,
                /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
                /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
            },

                {
                    /* f_depth */               3,
                    /* f_match_flags */         0,
                    /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(), // match any node
                    /* f_with_value */          nullptr,
                    /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
                    /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
                }
};


/** \brief Optimize '!true' to 'false'.
 *
 * This table defines the optimization of '!true' to 'false'.
 */
optimization_entry_t const g_optimizer_logical_entry_not_literal[] =
{
    {
        /* f_name */            "'!a' where 'a' is a literal -> 'true' or 'false'",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_logical_match_not_literal),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_logical_not_1_0)
    }
};


/** \brief Optimize 'true && a' to 'a'.
 *
 * This table defines the optimization of 'true && a' to 'a'.
 */
optimization_entry_t const g_optimizer_logical_entry_true_and_a[] =
{
    {
        /* f_name */            "'true && a' -> 'a'",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_logical_match_true_and_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_2_0)
    }
};


/** \brief Optimize 'false && a' to 'false'.
 *
 * This table defines the optimization of 'false && a' to 'false'.
 */
optimization_entry_t const g_optimizer_logical_entry_false_and_a[] =
{
    {
        /* f_name */            "'false && a' -> 'false'",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_logical_match_false_and_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_1_0)
    }
};


///** \brief Optimize 'a && false' to 'false'.
// *
// * This table defines the optimization of 'a && false' to 'false' in
// * the event 'a' has no side effects.
// *
// * \warning
// * Tis is incorrect because if a is false, 'a && false' returns 'a'
// * and not false.
// */
//optimization_entry_t const g_optimizer_logical_entry_a_and_false[] =
//{
//    {
//        /* f_name */            "'a && false' -> 'false'",
//        /* f_flags */           0,
//
//        /* f_match */           POINTER_AND_COUNT(g_optimizer_logical_match_a_and_false),
//        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_2_0)
//    }
//};


/** \brief Optimize 'a && b || c' to 'a ? b : c'.
 *
 * This table defines the optimization of 'a && b || c' to 'a ? b : c'.
 */
optimization_entry_t const g_optimizer_logical_entry_a_and_b_or_c[] =
{
    {
        /* f_name */            "'a && b || c' -> 'a ? b : c'",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_logical_match_a_and_b_or_c),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_logical_a_and_b_or_c)
    }
};


/** \brief Optimize 'true || a' to 'true'.
 *
 * This table defines the optimization of 'true || a' to 'true'.
 */
optimization_entry_t const g_optimizer_logical_entry_true_or_a[] =
{
    {
        /* f_name */            "'true || a' -> 'true'",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_logical_match_true_or_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_1_0)
    }
};


/** \brief Optimize 'false || a' to 'a'.
 *
 * This table defines the optimization of 'false || a' to 'a'.
 */
optimization_entry_t const g_optimizer_logical_entry_false_or_a[] =
{
    {
        /* f_name */            "'false || a' -> 'a'",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_logical_match_false_or_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_2_0)
    }
};


/** \brief Optimize 'true/false ^^ true/false' to 'true/false'.
 *
 * This table defines the optimization of two literals and the
 * logical XOR operator. The result using standard JavaScript
 * operators is:
 *
 * \code
 *      (a ^^ b) <=> (!a != !b ? a || b : false)
 * \endcode
 *
 * Unfortunately this does not allow us to cleanly return a or b
 * if one of them is a literal (whether true or false) because
 * we want to return the Boolean false when both a and b represent
 * the same Boolean value.
 */
optimization_entry_t const g_optimizer_logical_entry_literal_xor_literal[] =
{
    {
        /* f_name */            "'literal ^^ literal' -> 'literal'",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_logical_match_boolean_literal_or_boolean_literal),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_logical_xor_1_2_0)
    }
};


/** \brief Optimize 'true/false ^^ true/false' to 'true/false'.
 *
 * This table defines the optimization of two literals and the
 * logical XOR operator. The result using standard JavaScript
 * operators is:
 *
 * \code
 *      (a ^^ b) <=> (!a != !b ? a || b : false)
 * \endcode
 *
 * Unfortunately this does not allow us to cleanly return a or b
 * if one of them is a literal (whether true or false) because
 * we want to return the Boolean false when both a and b represent
 * the same Boolean value.
 */
optimization_entry_t const g_optimizer_logical_entry_if_while_logical_not_not[] =
{
    {
        /* f_name */            "'if(!!a)' -> 'if(a)'",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_logical_match_if_while_not_not_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_3_1)
    }
};


/** \brief Optimize 'if(!a) b else c' to 'if(a) c else b'.
 *
 * Optimize 'if(!a) b else c' by removing the '!' by swapping 'b' and 'c'
 */
optimization_entry_t const g_optimizer_logical_entry_if_logical_not_else[] =
{
    {
        /* f_name */            "'if(!a) b else c' -> 'if(a) c else b'",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_logical_match_if_logical_not_else),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_if_logical_not_else)
    }
};


/** \brief Optimize 'for(a; !!b; c) d'.
 *
 * The '!!b' can be optimized as just 'b' because the for() instruction
 * knows how to convert b to a Boolean without the need to use the logical
 * NOT operator.
 */
optimization_entry_t const g_optimizer_logical_entry_for_logical_not_not[] =
{
    {
        /* f_name */            "'for(a; !!b; c) d' -> for(a; b; c) d",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_logical_match_for_not_not_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_4_2)
    }
};


/** \brief Optimize '!!a ? b : c'.
 *
 * The '!!a' can be optimized as just 'a' because the conditional instruction
 * knows how to convert a to a Boolean without the need to use the logical
 * NOT operator.
 */
optimization_entry_t const g_optimizer_logical_entry_conditional_logical_not_not[] =
{
    {
        /* f_name */            "'!!a ? b : c' -> a ? b : c",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_logical_match_conditional_not_not_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_3_1)
    }
};


/** \brief Optimize '!!!a' to '!a'.
 *
 * This table defines the optimization of '!!!a' to '!a'.
 *
 * Note that '!!a' is not equivalent to just 'a' unless 'a'
 * is a known Boolean. This is why we have this extra optimization
 * which should really very rarely happen but when people use
 * parenthesis, things like that can appear in fairly standard
 * code.
 */
optimization_entry_t const g_optimizer_logical_entry_not_not_not_a[] =
{
    {
        /* f_name */            "'!!!a' whatever 'a' is -> logical_not(a)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_logical_match_not_not_not_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_2_0)
    }
};


/** \brief List of logical entries.
 *
 * This table is a list of all the logical entries found in this file.
 *
 * It is referenced in the optimizer_tables.cpp as one of the tables to
 * be used to optimize node trees.
 */
optimization_table_t const g_optimizer_logical_table[] =
{
    // logical NOT
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_logical_entry_not_literal)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_logical_entry_not_not_not_a)
    },

    // logical AND
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_logical_entry_true_and_a)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_logical_entry_false_and_a)
    },
    //{
    //    /* f_entry */           POINTER_AND_COUNT(g_optimizer_logical_entry_a_and_false)
    //}
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_logical_entry_a_and_b_or_c)
    },

    // logical OR
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_logical_entry_true_or_a)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_logical_entry_false_or_a)
    },

    // logical XOR
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_logical_entry_literal_xor_literal)
    },

    // if(!!...) or while(!!...) or for(...; !!...; ...) and others
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_logical_entry_if_while_logical_not_not)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_logical_entry_if_logical_not_else)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_logical_entry_for_logical_not_not)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_logical_entry_conditional_logical_not_not)
    }
};



}
// namespace optimizer_details
}
// namespace as2js

// vim: ts=4 sw=4 et
