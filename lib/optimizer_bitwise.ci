/* optimizer_bitwise.ci -- written by Alexis WILKE for Made to Order Software Corp. (c) 2005-2017 */

/*

Copyright (c) 2005-2017 Made to Order Software Corp.

http://snapwebsites.org/project/as2js

Permission is hereby granted, free of charge, to any
person obtaining a copy of this software and
associated documentation files (the "Software"), to
deal in the Software without restriction, including
without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

/** \file
 * \brief Optimizations applied against bitwise operators.
 *
 * This files defines variable optimizations applied to bitwise operators
 * such as 'a & b' which can be computed when a and b are numbers.
 */


namespace as2js
{
namespace optimizer_details
{


/** \brief Match '~a'
 *
 * This table defines a match for the expression '~a' when a
 * is a literal.
 */
optimization_match_t const g_optimizer_bitwise_match_not_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_bitwise_not),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match '~~~a'
 *
 * This table defines a match for the expression '~~~a', where 'a' can
 * be anything at all.
 */
optimization_match_t const g_optimizer_bitwise_match_not_not_not_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_bitwise_not),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_bitwise_not),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

            {
                /* f_depth */               2,
                /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
                /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_bitwise_not),
                /* f_with_value */          nullptr,
                /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
                /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
            },

                {
                    /* f_depth */               3,
                    /* f_match_flags */         0,
                    /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(), // match any node
                    /* f_with_value */          nullptr,
                    /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
                    /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
                }
};


/** \brief Match 'a & b'
 *
 * This table defines a match for the expression 'a & b' when a and b
 * are numbers.
 */
optimization_match_t const g_optimizer_bitwise_match_a_and_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_bitwise_and),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a & 0xFFFFFFFF'
 *
 * This table defines a match for the expression 'a & 0xFFFFFFFF'.
 */
optimization_match_t const g_optimizer_bitwise_match_a_and_max32bit[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_bitwise_and),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          g_optimizer_value_max32bit,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match '0xFFFFFFFF & a'
 *
 * This table defines a match for the expression '0xFFFFFFFF & a'.
 */
optimization_match_t const g_optimizer_bitwise_match_max32bit_and_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_bitwise_and),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          g_optimizer_value_max32bit,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a | b'
 *
 * This table defines a match for the expression 'a | b' when a and b
 * are numbers.
 */
optimization_match_t const g_optimizer_bitwise_match_a_or_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_bitwise_or),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a ^ b'
 *
 * This table defines a match for the expression 'a ^ b' when a and b
 * are numbers.
 */
optimization_match_t const g_optimizer_bitwise_match_a_xor_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_bitwise_xor),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a ^ 0xFFFFFFFF'
 *
 * This table defines a match for the expression 'a ^ 0xFFFFFFFF' when a and
 * b are numbers.
 */
optimization_match_t const g_optimizer_bitwise_match_a_xor_max32bit[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_bitwise_xor),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          g_optimizer_value_max32bit,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match '0xFFFFFFFF ^ a'
 *
 * This table defines a match for the expression '0xFFFFFFFF ^ a' when a and
 * b are numbers.
 */
optimization_match_t const g_optimizer_bitwise_match_max32bit_xor_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_bitwise_xor),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          g_optimizer_value_max32bit,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a << b'
 *
 * This table defines a match for the expression 'a << b' when a and b
 * are numbers.
 */
optimization_match_t const g_optimizer_bitwise_match_a_shift_left_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_shift_left),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a >> b'
 *
 * This table defines a match for the expression 'a >> b' when a and b
 * are numbers.
 */
optimization_match_t const g_optimizer_bitwise_match_a_shift_right_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_shift_right),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a >>> b'
 *
 * This table defines a match for the expression 'a >>> b' when a and b
 * are numbers.
 */
optimization_match_t const g_optimizer_bitwise_match_a_shift_right_unsigned_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_shift_right_unsigned),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a <% b'
 *
 * This table defines a match for the expression 'a <% b' when a and b
 * are numbers.
 */
optimization_match_t const g_optimizer_bitwise_match_a_rotate_left_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_rotate_left),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a >% b'
 *
 * This table defines a match for the expression 'a >% b' when a and b
 * are numbers.
 */
optimization_match_t const g_optimizer_bitwise_match_a_rotate_right_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_rotate_right),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};



/** \brief Optimize '~number' to 'number'.
 *
 * This table defines the optimization of '~number' to 'number'.
 */
optimization_entry_t const g_optimizer_bitwise_entry_not_a[] =
{
    {
        /* f_name */            "~a, where a is a literal -> bitwise_not(a)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_bitwise_match_not_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_bitwise_not_1_0)
    }
};


/** \brief Optimize '~~~a' to '~a'.
 *
 * This table defines the optimization of '~~~a' to '~a'.
 */
optimization_entry_t const g_optimizer_bitwise_entry_not_not_not_a[] =
{
    {
        /* f_name */            "~~~a -> ~a",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_bitwise_match_not_not_not_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_3_1)
    }
};


/** \brief Optimize 'number & number' to 'number'.
 *
 * This table defines the optimization of 'number & number' to 'number'.
 */
optimization_entry_t const g_optimizer_bitwise_entry_a_and_b[] =
{
    {
        /* f_name */            "a & b, where a and b are numbers -> and(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_bitwise_match_a_and_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_bitwise_and_1_2_0)
    }
};


/** \brief Optimize 'a & 0xFFFFFFFF' to 'a | 0'.
 *
 * This table defines the optimization of 'a & 0xFFFFFFFF' to 'a | 0'.
 */
optimization_entry_t const g_optimizer_bitwise_entry_a_and_max32bit[] =
{
    {
        /* f_name */            "a & 0xFFFFFFFF -> a | 0",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_bitwise_match_a_and_max32bit),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_bitwise_and_max32bit_to_or_zero_2_0)
    }
};


/** \brief Optimize '0xFFFFFFFF & a' to '0 | a'.
 *
 * This table defines the optimization of '0xFFFFFFFF & a' to '0 | a'.
 */
optimization_entry_t const g_optimizer_bitwise_entry_max32bit_and_a[] =
{
    {
        /* f_name */            "'0xFFFFFFFF & a' -> '0 | a'",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_bitwise_match_max32bit_and_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_bitwise_and_max32bit_to_or_zero_1_0)
    }
};


/** \brief Optimize 'number | number' to 'number'.
 *
 * This table defines the optimization of 'number | number' to 'number'.
 */
optimization_entry_t const g_optimizer_bitwise_entry_a_or_b[] =
{
    {
        /* f_name */            "a | b, where a and b are numbers -> or(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_bitwise_match_a_or_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_bitwise_or_1_2_0)
    }
};


/** \brief Optimize 'number ^ number' to 'number'.
 *
 * This table defines the optimization of 'number ^ number' to 'number'.
 */
optimization_entry_t const g_optimizer_bitwise_entry_a_xor_b[] =
{
    {
        /* f_name */            "a ^ b, where a and b are numbers -> xor(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_bitwise_match_a_xor_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_bitwise_xor_1_2_0)
    }
};


/** \brief Optimize 'a ^ 0xFFFFFFFF' to '~a'.
 *
 * This table defines the optimization of 'a ^ 0xFFFFFFFF' to '~a'.
 */
optimization_entry_t const g_optimizer_bitwise_entry_a_xor_max32bit[] =
{
    {
        /* f_name */            "a ^ 0xFFFFFFFF -> ~a",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_bitwise_match_a_xor_max32bit),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_bitwise_xor_to_not_1_0_0)
    }
};


/** \brief Optimize '0xFFFFFFFF ^ a' to '~a'.
 *
 * This table defines the optimization of '0xFFFFFFFF ^ a' to '~a'.
 */
optimization_entry_t const g_optimizer_bitwise_entry_max32bit_xor_a[] =
{
    {
        /* f_name */            "0xFFFFFFFF ^ a -> ~a",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_bitwise_match_max32bit_xor_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_bitwise_xor_to_not_2_0_0)
    }
};


/** \brief Optimize 'number << number' to 'number'.
 *
 * This table defines the optimization of 'number << number' to 'number'.
 */
optimization_entry_t const g_optimizer_bitwise_entry_a_shift_left_b[] =
{
    {
        /* f_name */            "a << b, where a and b are numbers -> shift_left(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_bitwise_match_a_shift_left_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_shift_left_1_2_0)
    }
};


/** \brief Optimize 'number >> number' to 'number'.
 *
 * This table defines the optimization of 'number >> number' to 'number'.
 */
optimization_entry_t const g_optimizer_bitwise_entry_a_shift_right_b[] =
{
    {
        /* f_name */            "a >> b, where a and b are numbers -> shift_right(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_bitwise_match_a_shift_right_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_shift_right_1_2_0)
    }
};


/** \brief Optimize 'number >>> number' to 'number'.
 *
 * This table defines the optimization of 'number >>> number' to 'number'.
 */
optimization_entry_t const g_optimizer_bitwise_entry_a_shift_right_unsigned_b[] =
{
    {
        /* f_name */            "a >>> b, where a and b are numbers -> shift_right_unsigned(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_bitwise_match_a_shift_right_unsigned_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_shift_right_unsigned_1_2_0)
    }
};


/** \brief Optimize 'number <% number' to 'number'.
 *
 * This table defines the optimization of 'number <% number' to 'number'.
 */
optimization_entry_t const g_optimizer_bitwise_entry_a_rotate_left_b[] =
{
    {
        /* f_name */            "a <% b, where a and b are numbers -> rotate_left(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_bitwise_match_a_rotate_left_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_rotate_left_1_2_0)
    }
};


/** \brief Optimize 'number >% number' to 'number'.
 *
 * This table defines the optimization of 'number >% number' to 'number'.
 */
optimization_entry_t const g_optimizer_bitwise_entry_a_rotate_right_b[] =
{
    {
        /* f_name */            "a >% b, where a and b are numbers -> rotate_right(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_bitwise_match_a_rotate_right_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_rotate_right_1_2_0)
    }
};




/** \brief List of bitwise entries.
 *
 * This table is a list of all the bitwise entries found in this file.
 *
 * It is referenced in the optimizer_tables.cpp as one of the tables to
 * be used to optimize node trees.
 */
optimization_table_t const g_optimizer_bitwise_table[] =
{
    // bitwise NOT
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_bitwise_entry_not_a)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_bitwise_entry_not_not_not_a)
    },

    // bitwise AND
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_bitwise_entry_a_and_b)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_bitwise_entry_a_and_max32bit)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_bitwise_entry_max32bit_and_a)
    },

    // bitwise OR
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_bitwise_entry_a_or_b)
    },

    // bitwise XOR
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_bitwise_entry_a_xor_b)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_bitwise_entry_a_xor_max32bit)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_bitwise_entry_max32bit_xor_a)
    },

    // shift
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_bitwise_entry_a_shift_left_b)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_bitwise_entry_a_shift_right_b)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_bitwise_entry_a_shift_right_unsigned_b)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_bitwise_entry_a_rotate_left_b)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_bitwise_entry_a_rotate_right_b)
    }
};



}
// namespace optimizer_details
}
// namespace as2js

// vim: ts=4 sw=4 et
