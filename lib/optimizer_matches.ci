/* optimizer_matches.ci -- written by Alexis WILKE for Made to Order Software Corp. (c) 2005-2017 */

/*

Copyright (c) 2005-2017 Made to Order Software Corp.

http://snapwebsites.org/project/as2js

Permission is hereby granted, free of charge, to any
person obtaining a copy of this software and
associated documentation files (the "Software"), to
deal in the Software without restriction, including
without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

namespace as2js
{
namespace optimizer_details
{


/** A **/
Node::node_t const g_optimizer_match_add[]
{
    Node::node_t::NODE_ADD
};


Node::node_t const g_optimizer_match_any_literal[]
{
    Node::node_t::NODE_FALSE,
    Node::node_t::NODE_FLOAT64,
    Node::node_t::NODE_INT64,
    Node::node_t::NODE_NULL,
    Node::node_t::NODE_STRING,
    Node::node_t::NODE_TRUE,
    Node::node_t::NODE_UNDEFINED
};


Node::node_t const g_optimizer_match_arithmetic_assignments_except_add[]
{
    Node::node_t::NODE_ASSIGNMENT_DIVIDE,
    Node::node_t::NODE_ASSIGNMENT_MODULO,
    Node::node_t::NODE_ASSIGNMENT_MULTIPLY,
    Node::node_t::NODE_ASSIGNMENT_POWER,
    Node::node_t::NODE_ASSIGNMENT_SUBTRACT
};


Node::node_t const g_optimizer_match_assignment[]
{
    Node::node_t::NODE_ASSIGNMENT
};


Node::node_t const g_optimizer_match_assignment_subtract[]
{
    Node::node_t::NODE_ASSIGNMENT_SUBTRACT
};



/** B **/
Node::node_t const g_optimizer_match_bitwise_and[]
{
    Node::node_t::NODE_BITWISE_AND
};


Node::node_t const g_optimizer_match_bitwise_assignments[]
{
    Node::node_t::NODE_ASSIGNMENT_BITWISE_AND,
    Node::node_t::NODE_ASSIGNMENT_BITWISE_OR,
    Node::node_t::NODE_ASSIGNMENT_BITWISE_XOR,
    Node::node_t::NODE_ASSIGNMENT_ROTATE_LEFT,
    Node::node_t::NODE_ASSIGNMENT_ROTATE_RIGHT,
    Node::node_t::NODE_ASSIGNMENT_SHIFT_LEFT,
    Node::node_t::NODE_ASSIGNMENT_SHIFT_RIGHT,
    Node::node_t::NODE_ASSIGNMENT_SHIFT_RIGHT_UNSIGNED
};


Node::node_t const g_optimizer_match_bitwise_not[]
{
    Node::node_t::NODE_BITWISE_NOT
};


Node::node_t const g_optimizer_match_bitwise_or[]
{
    Node::node_t::NODE_BITWISE_OR
};


Node::node_t const g_optimizer_match_bitwise_xor[]
{
    Node::node_t::NODE_BITWISE_XOR
};




/** C **/
Node::node_t const g_optimizer_match_compare[]
{
    Node::node_t::NODE_COMPARE
};


Node::node_t const g_optimizer_match_conditional[]
{
    Node::node_t::NODE_CONDITIONAL
};




/** D **/
Node::node_t const g_optimizer_match_directive_list[]
{
    Node::node_t::NODE_DIRECTIVE_LIST
};


Node::node_t const g_optimizer_match_divide[]
{
    Node::node_t::NODE_DIVIDE
};


Node::node_t const g_optimizer_match_do[]
{
    Node::node_t::NODE_DO
};




/** E **/
Node::node_t const g_optimizer_match_equal[]
{
    Node::node_t::NODE_EQUAL
};




/** F **/
Node::node_t const g_optimizer_match_false[]
{
    Node::node_t::NODE_FALSE
};


Node::node_t const g_optimizer_match_false_literals[]
{
    Node::node_t::NODE_FALSE,
    Node::node_t::NODE_FLOAT64,
    Node::node_t::NODE_INT64,
    Node::node_t::NODE_NULL,
    Node::node_t::NODE_STRING,
    Node::node_t::NODE_UNDEFINED
};


Node::node_t const g_optimizer_match_for[]
{
    Node::node_t::NODE_FOR
};




/** G **/
Node::node_t const g_optimizer_match_greater[]
{
    Node::node_t::NODE_GREATER
};


Node::node_t const g_optimizer_match_greater_equal[]
{
    Node::node_t::NODE_GREATER_EQUAL
};




/** I **/
Node::node_t const g_optimizer_match_identifier[]
{
    Node::node_t::NODE_IDENTIFIER
};


Node::node_t const g_optimizer_match_floating_point[]
{
    Node::node_t::NODE_FLOAT64
};


Node::node_t const g_optimizer_match_if[]
{
    Node::node_t::NODE_IF
};


Node::node_t const g_optimizer_match_if_or_while[]
{
    Node::node_t::NODE_IF,
    Node::node_t::NODE_WHILE
};


Node::node_t const g_optimizer_match_integer[]
{
    Node::node_t::NODE_INT64
};


/** L **/
Node::node_t const g_optimizer_match_less[]
{
    Node::node_t::NODE_LESS
};


Node::node_t const g_optimizer_match_less_equal[]
{
    Node::node_t::NODE_LESS_EQUAL
};


Node::node_t const g_optimizer_match_logical_and[]
{
    Node::node_t::NODE_LOGICAL_AND
};


Node::node_t const g_optimizer_match_logical_not[]
{
    Node::node_t::NODE_LOGICAL_NOT
};


Node::node_t const g_optimizer_match_logical_or[]
{
    Node::node_t::NODE_LOGICAL_OR
};


Node::node_t const g_optimizer_match_logical_xor[]
{
    Node::node_t::NODE_LOGICAL_XOR
};




/** M **/
Node::node_t const g_optimizer_match_match[]
{
    Node::node_t::NODE_MATCH
};


Node::node_t const g_optimizer_match_maximum[]
{
    Node::node_t::NODE_MAXIMUM
};


Node::node_t const g_optimizer_match_minimum[]
{
    Node::node_t::NODE_MINIMUM
};


Node::node_t const g_optimizer_match_minmax_assignments[]
{
    Node::node_t::NODE_ASSIGNMENT_MAXIMUM,
    Node::node_t::NODE_ASSIGNMENT_MINIMUM
};


Node::node_t const g_optimizer_match_modulo[]
{
    Node::node_t::NODE_MODULO
};


Node::node_t const g_optimizer_match_multiply[]
{
    Node::node_t::NODE_MULTIPLY
};




/** N **/
Node::node_t const g_optimizer_match_not_equal[]
{
    Node::node_t::NODE_NOT_EQUAL
};


Node::node_t const g_optimizer_match_not_match[]
{
    Node::node_t::NODE_NOT_MATCH
};


Node::node_t const g_optimizer_match_numbers[]
{
    Node::node_t::NODE_INT64,
    Node::node_t::NODE_FLOAT64
};




/** P **/
Node::node_t const g_optimizer_match_power[]
{
    Node::node_t::NODE_POWER
};




/** R **/
Node::node_t const g_optimizer_match_regular_expression[]
{
    Node::node_t::NODE_REGULAR_EXPRESSION
};


Node::node_t const g_optimizer_match_rotate_left[]
{
    Node::node_t::NODE_ROTATE_LEFT
};


Node::node_t const g_optimizer_match_rotate_right[]
{
    Node::node_t::NODE_ROTATE_RIGHT
};




/** S **/
Node::node_t const g_optimizer_match_shift_left[]
{
    Node::node_t::NODE_SHIFT_LEFT
};


Node::node_t const g_optimizer_match_shift_right[]
{
    Node::node_t::NODE_SHIFT_RIGHT
};


Node::node_t const g_optimizer_match_shift_right_unsigned[]
{
    Node::node_t::NODE_SHIFT_RIGHT_UNSIGNED
};


Node::node_t const g_optimizer_match_smart_match[]
{
    Node::node_t::NODE_SMART_MATCH
};


Node::node_t const g_optimizer_match_strictly_equal[]
{
    Node::node_t::NODE_STRICTLY_EQUAL
};


Node::node_t const g_optimizer_match_strictly_not_equal[]
{
    Node::node_t::NODE_STRICTLY_NOT_EQUAL
};


Node::node_t const g_optimizer_match_string[]
{
    Node::node_t::NODE_STRING
};


Node::node_t const g_optimizer_match_subtract[]
{
    Node::node_t::NODE_SUBTRACT
};




/** T **/
Node::node_t const g_optimizer_match_true[]
{
    Node::node_t::NODE_TRUE
};


Node::node_t const g_optimizer_match_true_literals[]
{
    Node::node_t::NODE_FLOAT64,
    Node::node_t::NODE_INT64,
    Node::node_t::NODE_STRING,
    Node::node_t::NODE_TRUE
};




/** W **/
Node::node_t const g_optimizer_match_while[]
{
    Node::node_t::NODE_WHILE
};





}
// namespace optimizer_details
}
// namespace as2js

// vim: ts=4 sw=4 et
