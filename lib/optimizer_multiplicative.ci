/* optimizer_multiplicative.ci -- written by Alexis WILKE for Made to Order Software Corp. (c) 2005-2017 */

/*

Copyright (c) 2005-2017 Made to Order Software Corp.

http://snapwebsites.org/project/as2js

Permission is hereby granted, free of charge, to any
person obtaining a copy of this software and
associated documentation files (the "Software"), to
deal in the Software without restriction, including
without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice
shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

/** \file
 * \brief Optimizations applied against multiplicative operators.
 *
 * This files optimizes multiplicative operations as much as possible.
 *
 * This includes: multiplications (*), divisions (/), modulo (%),
 * and power (**).
 */


namespace as2js
{
namespace optimizer_details
{


/** \brief Match 'a * b'
 *
 * This table defines a match for the expression 'a * b' when 'a' and 'b'
 * are literals.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_multiply_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_multiply),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a * NaN'
 *
 * This table defines a match for the expression 'a * NaN' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_multiply_NaN[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_multiply),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'NaN * a'
 *
 * This table defines a match for the expression 'NaN * a' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_NaN_multiply_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_multiply),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a / b'
 *
 * This table defines a match for the expression 'a / b' when 'a' and 'b'
 * are literals.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_divide_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_divide),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a / NaN'
 *
 * This table defines a match for the expression 'a / NaN' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_divide_NaN[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_divide),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'NaN / a'
 *
 * This table defines a match for the expression 'NaN / a' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_NaN_divide_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_divide),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a % b'
 *
 * This table defines a match for the expression 'a % b' when 'a' and 'b'
 * are numbers.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_modulo_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_modulo),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a % NaN'
 *
 * This table defines a match for the expression 'a % NaN' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_modulo_NaN[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_modulo),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'NaN % a'
 *
 * This table defines a match for the expression 'NaN % a' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_NaN_modulo_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_modulo),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a ** b'
 *
 * This table defines a match for the expression 'a ** b' when 'a' and 'b'
 * are numbers.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_power_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_power),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a ** NaN'
 *
 * This table defines a match for the expression 'a ** NaN' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_power_NaN[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_power),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'NaN ** a'
 *
 * This table defines a match for the expression 'NaN ** a' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_NaN_power_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_power),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};




/** \brief Optimize 'a * b'.
 *
 * This table defines the optimization of 'a * b' to the result when 'a'
 * and 'b' are literals.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_multiply_b[] =
{
    {
        /* f_name */            "'a * b' -> multiply(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_multiply_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_multiply_1_2_0)
    }
};


/** \brief Optimize 'a * NaN'.
 *
 * This table defines the optimization of 'a * NaN' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_multiply_NaN[] =
{
    {
        /* f_name */            "'a * NaN' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_multiply_NaN),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_2_0)
    }
};


/** \brief Optimize 'NaN * a'.
 *
 * This table defines the optimization of 'NaN * a' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_NaN_multiply_a[] =
{
    {
        /* f_name */            "'NaN * a' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_NaN_multiply_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_1_0)
    }
};


/** \brief Optimize 'a / b'.
 *
 * This table defines the optimization of 'a / b' to the result when 'a'
 * and 'b' are literals.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_divide_b[] =
{
    {
        /* f_name */            "'a / b' -> divide(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_divide_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_divide_1_2_0)
    }
};


/** \brief Optimize 'a / NaN'.
 *
 * This table defines the optimization of 'a / NaN' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_divide_NaN[] =
{
    {
        /* f_name */            "'a / NaN' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_divide_NaN),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_2_0)
    }
};


/** \brief Optimize 'NaN / a'.
 *
 * This table defines the optimization of 'NaN / a' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_NaN_divide_a[] =
{
    {
        /* f_name */            "'NaN / a' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_NaN_divide_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_1_0)
    }
};


/** \brief Optimize 'a % b'.
 *
 * This table defines the optimization of 'a % b' to the result when 'a'
 * and 'b' are literals.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_modulo_b[] =
{
    {
        /* f_name */            "'a % b' -> modulo(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_modulo_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_modulo_1_2_0)
    }
};


/** \brief Optimize 'a % NaN'.
 *
 * This table defines the optimization of 'a % NaN' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_modulo_NaN[] =
{
    {
        /* f_name */            "'a % NaN' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_modulo_NaN),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_2_0)
    }
};


/** \brief Optimize 'NaN % a'.
 *
 * This table defines the optimization of 'NaN % a' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_NaN_modulo_a[] =
{
    {
        /* f_name */            "'NaN % a' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_NaN_modulo_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_1_0)
    }
};


/** \brief Optimize 'a ** b'.
 *
 * This table defines the optimization of 'a ** b' to the result when 'a'
 * and 'b' are literals.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_power_b[] =
{
    {
        /* f_name */            "'a ** b' -> power(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_power_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_power_1_2_0)
    }
};


/** \brief Optimize 'a ** NaN'.
 *
 * This table defines the optimization of 'a ** NaN' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_power_NaN[] =
{
    {
        /* f_name */            "'a % NaN' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_power_NaN),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_2_0)
    }
};


/** \brief Optimize 'NaN ** a'.
 *
 * This table defines the optimization of 'NaN ** a' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_NaN_power_a[] =
{
    {
        /* f_name */            "'NaN ** a' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_NaN_power_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_1_0)
    }
};




/** \brief List of multiplicative entries.
 *
 * This table is a list of all the multiplicative entries found in this file.
 *
 * It is referenced in the optimizer_tables.cpp as one of the tables to
 * be used to optimize node trees.
 */
optimization_table_t const g_optimizer_multiplicative_table[] =
{
    // multiply
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_multiply_b)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_multiply_NaN)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_NaN_multiply_a)
    },

    // divide
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_divide_b)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_divide_NaN)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_NaN_divide_a)
    },

    // modulo
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_modulo_b)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_modulo_NaN)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_NaN_modulo_a)
    },

    // power
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_power_b)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_power_NaN)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_NaN_power_a)
    }
};



}
// namespace optimizer_details
}
// namespace as2js

// vim: ts=4 sw=4 et
