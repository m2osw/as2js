// Copyright (c) 2005-2025  Made to Order Software Corp.  All Rights Reserved
//
// https://snapwebsites.org/project/as2js
// contact@m2osw.com
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

/** \file
 * \brief Optimizations applied against multiplicative operators.
 *
 * This files optimizes multiplicative operations as much as possible.
 *
 * This includes: multiplications (*), divisions (/), modulo (%),
 * and power (**).
 */


namespace as2js
{
namespace optimizer_details
{


/** \brief Match 'a * b'
 *
 * This table defines a match for the expression 'a * b' when 'a' and 'b'
 * are literals.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_multiply_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_multiply),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a * NaN'
 *
 * This table defines a match for the expression 'a * NaN' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_multiply_NaN[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_multiply),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'NaN * a'
 *
 * This table defines a match for the expression 'NaN * a' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_NaN_multiply_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_multiply),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a / b'
 *
 * This table defines a match for the expression 'a / b' when 'a' and 'b'
 * are literals.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_divide_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_divide),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a / NaN'
 *
 * This table defines a match for the expression 'a / NaN' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_divide_NaN[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_divide),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'NaN / a'
 *
 * This table defines a match for the expression 'NaN / a' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_NaN_divide_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_divide),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a % b'
 *
 * This table defines a match for the expression 'a % b' when 'a' and 'b'
 * are numbers.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_modulo_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_modulo),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a % NaN'
 *
 * This table defines a match for the expression 'a % NaN' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_modulo_NaN[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_modulo),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'NaN % a'
 *
 * This table defines a match for the expression 'NaN % a' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_NaN_modulo_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_modulo),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a ** b'
 *
 * This table defines a match for the expression 'a ** b' when 'a' and 'b'
 * are numbers.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_power_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_power),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a ** NaN'
 *
 * This table defines a match for the expression 'a ** NaN' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_a_power_NaN[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_power),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'NaN ** a'
 *
 * This table defines a match for the expression 'NaN ** a' when 'a' has
 * no side effects.
 */
optimization_match_t const g_optimizer_multiplicative_match_NaN_power_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_power),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          g_optimizer_value_no_side_effects,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};




/** \brief Optimize 'a * b'.
 *
 * This table defines the optimization of 'a * b' to the result when 'a'
 * and 'b' are literals.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_multiply_b[] =
{
    {
        /* f_name */            "'a * b' -> multiply(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_multiply_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_multiply_1_2_0)
    }
};


/** \brief Optimize 'a * NaN'.
 *
 * This table defines the optimization of 'a * NaN' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_multiply_NaN[] =
{
    {
        /* f_name */            "'a * NaN' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_multiply_NaN),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_2_0)
    }
};


/** \brief Optimize 'NaN * a'.
 *
 * This table defines the optimization of 'NaN * a' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_NaN_multiply_a[] =
{
    {
        /* f_name */            "'NaN * a' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_NaN_multiply_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_1_0)
    }
};


/** \brief Optimize 'a / b'.
 *
 * This table defines the optimization of 'a / b' to the result when 'a'
 * and 'b' are literals.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_divide_b[] =
{
    {
        /* f_name */            "'a / b' -> divide(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_divide_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_divide_1_2_0)
    }
};


/** \brief Optimize 'a / NaN'.
 *
 * This table defines the optimization of 'a / NaN' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_divide_NaN[] =
{
    {
        /* f_name */            "'a / NaN' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_divide_NaN),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_2_0)
    }
};


/** \brief Optimize 'NaN / a'.
 *
 * This table defines the optimization of 'NaN / a' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_NaN_divide_a[] =
{
    {
        /* f_name */            "'NaN / a' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_NaN_divide_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_1_0)
    }
};


/** \brief Optimize 'a % b'.
 *
 * This table defines the optimization of 'a % b' to the result when 'a'
 * and 'b' are literals.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_modulo_b[] =
{
    {
        /* f_name */            "'a % b' -> modulo(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_modulo_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_modulo_1_2_0)
    }
};


/** \brief Optimize 'a % NaN'.
 *
 * This table defines the optimization of 'a % NaN' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_modulo_NaN[] =
{
    {
        /* f_name */            "'a % NaN' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_modulo_NaN),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_2_0)
    }
};


/** \brief Optimize 'NaN % a'.
 *
 * This table defines the optimization of 'NaN % a' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_NaN_modulo_a[] =
{
    {
        /* f_name */            "'NaN % a' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_NaN_modulo_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_1_0)
    }
};


/** \brief Optimize 'a ** b'.
 *
 * This table defines the optimization of 'a ** b' to the result when 'a'
 * and 'b' are literals.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_power_b[] =
{
    {
        /* f_name */            "'a ** b' -> power(a, b)",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_power_b),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_power_1_2_0)
    }
};


/** \brief Optimize 'a ** NaN'.
 *
 * This table defines the optimization of 'a ** NaN' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_a_power_NaN[] =
{
    {
        /* f_name */            "'a % NaN' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_a_power_NaN),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_2_0)
    }
};


/** \brief Optimize 'NaN ** a'.
 *
 * This table defines the optimization of 'NaN ** a' to 'NaN'.
 */
optimization_entry_t const g_optimizer_multiplicative_entry_NaN_power_a[] =
{
    {
        /* f_name */            "'NaN ** a' -> NaN, if a has no side effects",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_multiplicative_match_NaN_power_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_1_0)
    }
};




/** \brief List of multiplicative entries.
 *
 * This table is a list of all the multiplicative entries found in this file.
 *
 * It is referenced in the optimizer_tables.cpp as one of the tables to
 * be used to optimize node trees.
 */
optimization_table_t const g_optimizer_multiplicative_table[] =
{
    // multiply
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_multiply_b)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_multiply_NaN)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_NaN_multiply_a)
    },

    // divide
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_divide_b)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_divide_NaN)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_NaN_divide_a)
    },

    // modulo
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_modulo_b)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_modulo_NaN)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_NaN_modulo_a)
    },

    // power
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_power_b)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_a_power_NaN)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_multiplicative_entry_NaN_power_a)
    }
};



} // namespace optimizer_details
} // namespace as2js
// vim: ts=4 sw=4 et
