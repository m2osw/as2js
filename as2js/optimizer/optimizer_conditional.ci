// Copyright (c) 2005-2023  Made to Order Software Corp.  All Rights Reserved
//
// https://snapwebsites.org/project/as2js
// contact@m2osw.com
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

namespace as2js
{
namespace optimizer_details
{

optimization_match_t const g_optimizer_conditional_match_true_condition[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_conditional),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        { // literal true
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_true_literals),
            /* f_with_value */          g_optimizer_value_true,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        { // a
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        { // b
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


optimization_match_t const g_optimizer_conditional_match_false_condition[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_conditional),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        { // literal false
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_false_literals),
            /* f_with_value */          g_optimizer_value_false,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        { // a
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        { // b
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


optimization_match_t const g_optimizer_conditional_match_minimum_literals[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_minimum),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


optimization_match_t const g_optimizer_conditional_match_maximum_literals[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_maximum),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};





optimization_entry_t const g_optimizer_conditional_entry_true_condition[] =
{
    {
        /* f_name */                "'true ? a : b' -> 'a'",
        /* f_flags */               0,

        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_conditional_match_true_condition),
        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_move_2_0)
    }
};


optimization_entry_t const g_optimizer_conditional_entry_false_condition[] =
{
    {
        /* f_name */                "'false ? a : b' -> 'b'",
        /* f_flags */               0,

        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_conditional_match_false_condition),
        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_move_3_0)
    }
};


optimization_entry_t const g_optimizer_conditional_entry_minimum[] =
{
    {
        /* f_name */                "'a <? b' where a and b are literals -> 'min(a, b)'",
        /* f_flags */               0,

        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_conditional_match_minimum_literals),
        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_minimum_1_2_0)
    }
};


optimization_entry_t const g_optimizer_conditional_entry_maximum[] =
{
    {
        /* f_name */                "'a >? b' where a and b are literals -> 'max(a, b)'",
        /* f_flags */               0,

        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_conditional_match_maximum_literals),
        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_maximum_1_2_0)
    }
};



/** \brief List of conditional entries.
 *
 * This table is a list of all the conditional entries found in this file.
 *
 * It is referenced in the optimizer_tables.cpp as one of the tables to
 * be used to optimize node trees.
 */
optimization_table_t const g_optimizer_conditional_table[] =
{
    {
        /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_conditional_entry_true_condition)
    },
    {
        /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_conditional_entry_false_condition)
    },
    {
        /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_conditional_entry_minimum)
    },
    {
        /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_conditional_entry_maximum)
    }
};




}
// namespace optimizer_details
}
// namespace as2js

// vim: ts=4 sw=4 et
