// Copyright (c) 2005-2025  Made to Order Software Corp.  All Rights Reserved
//
// https://snapwebsites.org/project/as2js
// contact@m2osw.com
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

/** \file
 * \brief Optimizations applied against logical operators.
 *
 * This files defines variable optimizations applied to logical operators
 * such as '!!!a' which can safely become '!a', or '!true' which gets
 * optimized to 'false'.
 */


namespace as2js
{
namespace optimizer_details
{


/** \brief Match 'a = a;'
 *
 * This table defines a match for the expression 'a = a;'.
 *
 * \todo
 * Would it be possible to also match 'a.b = a.b' with any
 * number of members, etc.?
 */
optimization_match_t const g_optimizer_assignment_match_a_equal_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_assignment),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_identifier),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_identifier),
            /* f_with_value */          g_optimizer_value_identifier_equal_1,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a \<op>= NaN;'
 *
 * This table defines a match for the expression 'a \<op>= NaN;' as long
 * as \<op> is not '+'.
 */
optimization_match_t const g_optimizer_assignment_match_a_arithmetic_equal_nan[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_arithmetic_assignments_except_add),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_identifier),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a \<op>= NaN;'
 *
 * This table defines a match for the expression 'a \<op>= NaN;' when
 * '\<op>' is the minimum (<?=) or the maximum (>?=) operator.
 */
optimization_match_t const g_optimizer_assignment_match_a_minmax_equal_nan[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_minmax_assignments),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_identifier),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


/** \brief Match 'a \<op>= NaN;'
 *
 * This table defines a match for the expression 'a \<op>= NaN;' when
 * '\<op>' is a bitwise operator (|, &, ...).
 */
optimization_match_t const g_optimizer_assignment_match_a_bitwise_equal_nan[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_bitwise_assignments),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_identifier),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_floating_point),
            /* f_with_value */          g_optimizer_value_nan,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};




/** \brief Optimize 'a = a;' to 'a;'.
 *
 * This table defines the optimization of 'a = a;' to 'a;'.
 */
optimization_entry_t const g_optimizer_assignment_entry_a_equal_a[] =
{
    {
        /* f_name */            "'a = a;' -> 'a;'",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_assignment_match_a_equal_a),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_1_0)
    }
};


/** \brief Optimize 'a \<op>= NaN;' to 'a = NaN;'.
 *
 * This table defines the optimization of 'a \<op>= a;' to 'a = NaN;'.
 */
optimization_entry_t const g_optimizer_assignment_entry_a_arithmetic_equal_nan[] =
{
    {
        /* f_name */            "'a <op>= NaN;' -> 'a = NaN;'",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_assignment_match_a_arithmetic_equal_nan),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_to_assignment_0)
    }
};


/** \brief Optimize 'a \<op>= NaN;' to 'a;'.
 *
 * This table defines the optimization of 'a \<op>= a;' to 'a = NaN;'
 * when the operator '\<op>' is minimum '<?=' or maximum '>?='.
 */
optimization_entry_t const g_optimizer_assignment_entry_a_minmax_equal_nan[] =
{
    {
        /* f_name */            "'a <?= NaN;' or 'a ?>= NaN;' -> 'a;'",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_assignment_match_a_minmax_equal_nan),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_move_1_0)
    }
};


/** \brief Optimize 'a \<op>= NaN;' to 'a = 0;'.
 *
 * This table defines the optimization of 'a \<op>= a;' to 'a = 0;'
 * when the operator '\<op>' is a bitwise operator (|=, &=, etc.).
 */
optimization_entry_t const g_optimizer_assignment_entry_a_bitwise_equal_nan[] =
{
    {
        /* f_name */            "'a <op>= NaN;' where <op> is a bitwise operator -> 'a = 0;'",
        /* f_flags */           0,

        /* f_match */           POINTER_AND_COUNT(g_optimizer_assignment_match_a_bitwise_equal_nan),
        /* f_optimize */        POINTER_AND_COUNT(g_optimizer_optimize_to_assignment_and_set_0)
    }
};





/** \brief List of assignment entries.
 *
 * This table is a list of all the additive entries found in this file.
 *
 * It is referenced in the optimizer_tables.cpp as one of the tables to
 * be used to optimize node trees.
 */
optimization_table_t const g_optimizer_assignments_table[] =
{
    // plain assignment
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_assignment_entry_a_equal_a)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_assignment_entry_a_arithmetic_equal_nan)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_assignment_entry_a_minmax_equal_nan)
    },
    {
        /* f_entry */           POINTER_AND_COUNT(g_optimizer_assignment_entry_a_bitwise_equal_nan)
    }
};



}
// namespace optimizer_details
}
// namespace as2js

// vim: ts=4 sw=4 et
