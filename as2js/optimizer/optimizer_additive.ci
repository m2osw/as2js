// Copyright (c) 2005-2025  Made to Order Software Corp.  All Rights Reserved
//
// https://snapwebsites.org/project/as2js
// contact@m2osw.com
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

namespace as2js
{
namespace optimizer_details
{

optimization_match_t const g_optimizer_additive_match_positive_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_add),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};

optimization_match_t const g_optimizer_additive_match_plus_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_add),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
//            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};

optimization_match_t const g_optimizer_additive_match_negate_a[] =
{
    {
        /* f_depth */               0,
        /* f_f_match_flags */       OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_subtract),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};

optimization_match_t const g_optimizer_additive_match_a_plus_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_add),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};

//optimization_match_t const g_optimizer_additive_match_a_plus_zero[] =
//{
//    {
//        /* f_depth */               0,
//        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
//        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_add),
//        /* f_with_value */          nullptr,
//        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
//        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
//    },
//
//        {
//            /* f_depth */               1,
//            /* f_match_flags */         0,
//            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
//            /* f_with_value */          nullptr,
//            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
//            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
//        },
//
//        {
//            /* f_depth */               1,
//            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
//            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
//            /* f_with_value */          g_optimizer_value_zero,
//            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
//            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
//        }
//};

optimization_match_t const g_optimizer_additive_match_a_minus_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_subtract),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};

optimization_match_t const g_optimizer_additive_match_zero_minus_a[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_subtract),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_numbers),
            /* f_with_value */          g_optimizer_value_zero,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         0,
            /* f_node_types[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};

optimization_match_t const g_optimizer_additive_match_a_concatenate_b_any[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_add),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_string),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};

optimization_match_t const g_optimizer_additive_match_a_any_concatenate_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_add),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_string),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};




optimization_entry_t const g_optimizer_additive_entry_positive_a[] =
{
    {
        /* f_name */                "'+a' when 'a' is a literal -> 'a'",
        /* f_flags */               0,

        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_additive_match_positive_a),
        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_to_number_1_0)
    }
};

// TODO: this is true only after we checked for a "+" function for the
//       type of 'a' ("+a" becomes "a.+()" if the operator is defined)
//
//optimization_entry_t const g_optimizer_additive_entry_plus_a[] =
//{
//    {
//        /* f_name */                "'+a' when 'a' is anything -> 'a'",
//        /* f_flags */               OPTIMIZATION_ENTRY_FLAG_UNSAFE_OBJECT,
//
//        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_additive_match_plus_a),
//        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_move_1_0)
//    }
//};

optimization_entry_t const g_optimizer_additive_entry_negate_a[] =
{
    {
        /* f_name */                "'-a' when 'a' is a literal -> 'negate(a)'",
        /* f_flags */               0,

        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_additive_match_negate_a),
        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_negate_1_0)
    }
};

optimization_entry_t const g_optimizer_additive_entry_a_plus_b[] =
{
    {
        /* f_name */                "'a+b' when 'a' and 'b' are numbers -> 'sum(a,b)'",
        /* f_flags */               0,

        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_additive_match_a_plus_b),
        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_add_1_2_0)
    }
};

//optimization_entry_t const g_optimizer_additive_entry_a_plus_zero[] =
//{
//    {
//        /* f_name */                "'a+0' whatever 'a' -> 'a'",
//        /* f_flags */               0,
//
//        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_additive_match_a_plus_zero),
//        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_move_1_0)
//    }
//};

optimization_entry_t const g_optimizer_additive_entry_a_minus_b[] =
{
    {
        /* f_name */                "'a-b' when 'a' and 'b' are numbers -> 'subtract(a,b)'",
        /* f_flags */               0,

        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_additive_match_a_minus_b),
        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_subtract_1_2_0)
    }
};

optimization_entry_t const g_optimizer_additive_entry_zero_minus_a[] =
{
    {
        /* f_name */                "'0-a' or '0.0-a' -> '-a'",
        /* f_flags */               OPTIMIZATION_ENTRY_FLAG_UNSAFE_OBJECT,

        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_additive_match_zero_minus_a),
        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_move_2_1)
    }
};

optimization_entry_t const g_optimizer_additive_entry_a_concatenate_b_any[] =
{
    {
        /* f_name */                "'a+b' when 'a' is a string and 'b' any literal -> 'concatenate(a,to_string(b))'",
        /* f_flags */               0,

        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_additive_match_a_concatenate_b_any),
        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_concatenate_1_2_0)
    }
};

optimization_entry_t const g_optimizer_additive_entry_a_any_concatenate_b[] =
{
    {
        /* f_name */                "'a+b' when 'a' is any literal and 'b' is a string -> 'concatenate(to_string(a),b)'",
        /* f_flags */               0,

        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_additive_match_a_any_concatenate_b),
        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_concatenate_1_2_0)
    }
};


/** \brief List of additive entries.
 *
 * This table is a list of all the additive entries found in this file.
 *
 * It is referenced in the optimizer_tables.cpp as one of the tables to
 * be used to optimize node trees.
 */
optimization_table_t const g_optimizer_additive_table[] =
{
    {
        /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_additive_entry_positive_a)
    },
    //{ -- wrong if we have a function operator
    //    /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_additive_entry_plus_a)
    //},
    {
        /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_additive_entry_negate_a)
    },
    {
        /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_additive_entry_a_plus_b)
    },
    //{ -- wrong, if a is a string we concatenate and if a is a Boolean, undefined, or null we convert to a number
    //    /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_additive_entry_a_plus_zero)
    //},
    {
        /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_additive_entry_a_minus_b)
    },
    {
        /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_additive_entry_zero_minus_a)
    },
    {
        /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_additive_entry_a_concatenate_b_any)
    },
    {
        /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_additive_entry_a_any_concatenate_b)
    }
};




}
// namespace optimizer_details
}
// namespace as2js

// vim: ts=4 sw=4 et
