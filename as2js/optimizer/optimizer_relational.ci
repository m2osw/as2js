// Copyright (c) 2005-2022  Made to Order Software Corp.  All Rights Reserved
//
// https://snapwebsites.org/project/as2js
// contact@m2osw.com
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

namespace as2js
{
namespace optimizer_details
{

optimization_match_t const g_optimizer_relational_match_a_less_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_less),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


optimization_match_t const g_optimizer_relational_match_a_less_equal_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_less_equal),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


optimization_match_t const g_optimizer_relational_match_a_greater_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_greater),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};


optimization_match_t const g_optimizer_relational_match_a_greater_equal_b[] =
{
    {
        /* f_depth */               0,
        /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
        /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_greater_equal),
        /* f_with_value */          nullptr,
        /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
        /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
    },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        },

        {
            /* f_depth */               1,
            /* f_match_flags */         OPTIMIZATION_MATCH_FLAG_CHILDREN,
            /* f_node_types[_count] */  POINTER_AND_COUNT(g_optimizer_match_any_literal),
            /* f_with_value */          nullptr,
            /* f_attributes[_count] */  NULL_POINTER_AND_COUNT(),
            /* f_flags[_count] */       NULL_POINTER_AND_COUNT(),
        }
};






optimization_entry_t const g_optimizer_relational_entry_a_less_b[] =
{
    {
        /* f_name */                "'a < b', with a and b as literals -> less(a, b)",
        /* f_flags */               0,

        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_relational_match_a_less_b),
        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_less_1_2_0)
    }
};


optimization_entry_t const g_optimizer_relational_entry_a_less_equal_b[] =
{
    {
        /* f_name */                "'a <= b', with a and b as literals -> less_equal(a, b)",
        /* f_flags */               0,

        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_relational_match_a_less_equal_b),
        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_less_equal_1_2_0)
    }
};


optimization_entry_t const g_optimizer_relational_entry_a_greater_b[] =
{
    {
        /* f_name */                "'a > b', with a and b as literals -> greater(a, b)",
        /* f_flags */               0,

        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_relational_match_a_greater_b),
        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_greater_1_2_0)
    }
};


optimization_entry_t const g_optimizer_relational_entry_a_greater_equal_b[] =
{
    {
        /* f_name */                "'a > b', with a and b as literals -> greater_equal(a, b)",
        /* f_flags */               0,

        /* f_match[_count] */       POINTER_AND_COUNT(g_optimizer_relational_match_a_greater_equal_b),
        /* f_optimize[_count] */    POINTER_AND_COUNT(g_optimizer_optimize_greater_equal_1_2_0)
    }
};






/** \brief List of relational entries.
 *
 * This table is a list of all the relational entries found in this file.
 *
 * It is referenced in the optimizer_tables.cpp as one of the tables to
 * be used to optimize node trees.
 */
optimization_table_t const g_optimizer_relational_table[] =
{
    {
        /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_relational_entry_a_less_b)
    },
    {
        /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_relational_entry_a_less_equal_b)
    },
    {
        /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_relational_entry_a_greater_b)
    },
    {
        /* f_entry[_count] */       POINTER_AND_COUNT(g_optimizer_relational_entry_a_greater_equal_b)
    }
    // TODO:
    // A user may write something such as:
    //    if(a <= 10 && a <= 0)    <=>   if(a <= 0)
    //    if(a <= 10 || a <= 0)    <=>   if(a <= 10)
    //    ...
    // which requires comparing whether 'a' is the same in both relations
    //
    // Also we want to generate a warning for things such as:
    //    if(a < 0 && a > 1) ...
    // since the test is always false and it probably is a programmer mistake
};




} // namespace optimizer_details
} // namespace as2js
// vim: ts=4 sw=4 et
