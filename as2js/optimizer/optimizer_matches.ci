// Copyright (c) 2005-2022  Made to Order Software Corp.  All Rights Reserved
//
// https://snapwebsites.org/project/as2js
// contact@m2osw.com
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

namespace as2js
{
namespace optimizer_details
{


/** A **/
node_t const g_optimizer_match_add[]
{
    node_t::NODE_ADD
};


node_t const g_optimizer_match_any_literal[]
{
    node_t::NODE_FALSE,
    node_t::NODE_FLOATING_POINT,
    node_t::NODE_INTEGER,
    node_t::NODE_NULL,
    node_t::NODE_STRING,
    node_t::NODE_TRUE,
    node_t::NODE_UNDEFINED
};


node_t const g_optimizer_match_arithmetic_assignments_except_add[]
{
    node_t::NODE_ASSIGNMENT_DIVIDE,
    node_t::NODE_ASSIGNMENT_MODULO,
    node_t::NODE_ASSIGNMENT_MULTIPLY,
    node_t::NODE_ASSIGNMENT_POWER,
    node_t::NODE_ASSIGNMENT_SUBTRACT
};


node_t const g_optimizer_match_assignment[]
{
    node_t::NODE_ASSIGNMENT
};


node_t const g_optimizer_match_assignment_subtract[]
{
    node_t::NODE_ASSIGNMENT_SUBTRACT
};



/** B **/
node_t const g_optimizer_match_bitwise_and[]
{
    node_t::NODE_BITWISE_AND
};


node_t const g_optimizer_match_bitwise_assignments[]
{
    node_t::NODE_ASSIGNMENT_BITWISE_AND,
    node_t::NODE_ASSIGNMENT_BITWISE_OR,
    node_t::NODE_ASSIGNMENT_BITWISE_XOR,
    node_t::NODE_ASSIGNMENT_ROTATE_LEFT,
    node_t::NODE_ASSIGNMENT_ROTATE_RIGHT,
    node_t::NODE_ASSIGNMENT_SHIFT_LEFT,
    node_t::NODE_ASSIGNMENT_SHIFT_RIGHT,
    node_t::NODE_ASSIGNMENT_SHIFT_RIGHT_UNSIGNED
};


node_t const g_optimizer_match_bitwise_not[]
{
    node_t::NODE_BITWISE_NOT
};


node_t const g_optimizer_match_bitwise_or[]
{
    node_t::NODE_BITWISE_OR
};


node_t const g_optimizer_match_bitwise_xor[]
{
    node_t::NODE_BITWISE_XOR
};




/** C **/
node_t const g_optimizer_match_compare[]
{
    node_t::NODE_COMPARE
};


node_t const g_optimizer_match_conditional[]
{
    node_t::NODE_CONDITIONAL
};




/** D **/
node_t const g_optimizer_match_directive_list[]
{
    node_t::NODE_DIRECTIVE_LIST
};


node_t const g_optimizer_match_divide[]
{
    node_t::NODE_DIVIDE
};


node_t const g_optimizer_match_do[]
{
    node_t::NODE_DO
};




/** E **/
node_t const g_optimizer_match_equal[]
{
    node_t::NODE_EQUAL
};




/** F **/
node_t const g_optimizer_match_false[]
{
    node_t::NODE_FALSE
};


node_t const g_optimizer_match_false_literals[]
{
    node_t::NODE_FALSE,
    node_t::NODE_FLOATING_POINT,
    node_t::NODE_INTEGER,
    node_t::NODE_NULL,
    node_t::NODE_STRING,
    node_t::NODE_UNDEFINED
};


node_t const g_optimizer_match_for[]
{
    node_t::NODE_FOR
};




/** G **/
node_t const g_optimizer_match_greater[]
{
    node_t::NODE_GREATER
};


node_t const g_optimizer_match_greater_equal[]
{
    node_t::NODE_GREATER_EQUAL
};




/** I **/
node_t const g_optimizer_match_identifier[]
{
    node_t::NODE_IDENTIFIER
};


node_t const g_optimizer_match_floating_point[]
{
    node_t::NODE_FLOATING_POINT
};


node_t const g_optimizer_match_if[]
{
    node_t::NODE_IF
};


node_t const g_optimizer_match_if_or_while[]
{
    node_t::NODE_IF,
    node_t::NODE_WHILE
};


node_t const g_optimizer_match_integer[]
{
    node_t::NODE_INTEGER
};


/** L **/
node_t const g_optimizer_match_less[]
{
    node_t::NODE_LESS
};


node_t const g_optimizer_match_less_equal[]
{
    node_t::NODE_LESS_EQUAL
};


node_t const g_optimizer_match_logical_and[]
{
    node_t::NODE_LOGICAL_AND
};


node_t const g_optimizer_match_logical_not[]
{
    node_t::NODE_LOGICAL_NOT
};


node_t const g_optimizer_match_logical_or[]
{
    node_t::NODE_LOGICAL_OR
};


node_t const g_optimizer_match_logical_xor[]
{
    node_t::NODE_LOGICAL_XOR
};




/** M **/
node_t const g_optimizer_match_match[]
{
    node_t::NODE_MATCH
};


node_t const g_optimizer_match_maximum[]
{
    node_t::NODE_MAXIMUM
};


node_t const g_optimizer_match_minimum[]
{
    node_t::NODE_MINIMUM
};


node_t const g_optimizer_match_minmax_assignments[]
{
    node_t::NODE_ASSIGNMENT_MAXIMUM,
    node_t::NODE_ASSIGNMENT_MINIMUM
};


node_t const g_optimizer_match_modulo[]
{
    node_t::NODE_MODULO
};


node_t const g_optimizer_match_multiply[]
{
    node_t::NODE_MULTIPLY
};




/** N **/
node_t const g_optimizer_match_not_equal[]
{
    node_t::NODE_NOT_EQUAL
};


node_t const g_optimizer_match_not_match[]
{
    node_t::NODE_NOT_MATCH
};


node_t const g_optimizer_match_numbers[]
{
    node_t::NODE_INTEGER,
    node_t::NODE_FLOATING_POINT
};




/** P **/
node_t const g_optimizer_match_power[]
{
    node_t::NODE_POWER
};




/** R **/
node_t const g_optimizer_match_regular_expression[]
{
    node_t::NODE_REGULAR_EXPRESSION
};


node_t const g_optimizer_match_rotate_left[]
{
    node_t::NODE_ROTATE_LEFT
};


node_t const g_optimizer_match_rotate_right[]
{
    node_t::NODE_ROTATE_RIGHT
};




/** S **/
node_t const g_optimizer_match_shift_left[]
{
    node_t::NODE_SHIFT_LEFT
};


node_t const g_optimizer_match_shift_right[]
{
    node_t::NODE_SHIFT_RIGHT
};


node_t const g_optimizer_match_shift_right_unsigned[]
{
    node_t::NODE_SHIFT_RIGHT_UNSIGNED
};


node_t const g_optimizer_match_smart_match[]
{
    node_t::NODE_SMART_MATCH
};


node_t const g_optimizer_match_strictly_equal[]
{
    node_t::NODE_STRICTLY_EQUAL
};


node_t const g_optimizer_match_strictly_not_equal[]
{
    node_t::NODE_STRICTLY_NOT_EQUAL
};


node_t const g_optimizer_match_string[]
{
    node_t::NODE_STRING
};


node_t const g_optimizer_match_subtract[]
{
    node_t::NODE_SUBTRACT
};




/** T **/
node_t const g_optimizer_match_true[]
{
    node_t::NODE_TRUE
};


node_t const g_optimizer_match_true_literals[]
{
    node_t::NODE_FLOATING_POINT,
    node_t::NODE_INTEGER,
    node_t::NODE_STRING,
    node_t::NODE_TRUE
};




/** W **/
node_t const g_optimizer_match_while[]
{
    node_t::NODE_WHILE
};





} // namespace optimizer_details
} // namespace as2js
// vim: ts=4 sw=4 et
