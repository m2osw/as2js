#!/bin/bash

set -e

if test "$1" = "--help" -o "$1" = "-h"
then
    echo "Usage: $0 [--opt]"
    echo "where --opt is one of:"
    echo "   --all          run all tests, except special RC and Stream cases"
    echo "   --compiler     run all the compiler tests"
    echo "   --db           run all the database tests"
    echo "   --float64      run all float64 tests"
    echo "   --full         run all tests and publish to the world"
    echo "   --int64        run all int64 tests"
    echo "   --json         run all json tests"
    echo "   --lexer        run all lexer tests"
    echo "   --message      run all message tests"
    echo "   --node         run all node tests"
    echo "   --optimizer    run all optimizer tests"
    echo "   --option       run all option tests"
    echo "   --parser       run all parser tests"
    echo "   --position     run all position tests"
    echo "   --rc           run all rc tests, including the special case"
    echo "   --stream       run all stream tests, including the special case"
    echo "   --string       run all string tests"
    echo "   --version      run all version tests"
    exit 1;
fi

if test "$1" = "--full"
then
    FULL=true
    shift
else
    FULL=false
fi

start_date=`date`
SOURCE=`pwd`
MAJOR=`grep AS2JS_VERSION_MAJOR CMakeLists.txt | sed -e 's/^.*set(.*AS2JS_VERSION_MAJOR.*\([0-9]\+\).*$/\1/'`
MINOR=`grep AS2JS_VERSION_MINOR CMakeLists.txt | sed -e 's/^.*set(.*AS2JS_VERSION_MINOR.*\([0-9]\+\).*$/\1/'`
PATCH=`grep AS2JS_VERSION_PATCH CMakeLists.txt | sed -e 's/^.*set(.*AS2JS_VERSION_PATCH.*\([0-9]\+\).*$/\1/'`
VERSION="$MAJOR.$MINOR.$PATCH"
echo "***"
echo "*** as2js coverage for version $VERSION (`date`)"
echo "***"
mkdir -p tmp/coverage
rm -rf tmp/coverage/*
cd tmp/coverage
ln -s ../../scripts scripts
mkdir BUILD
cd BUILD
# request coverage in this build
dist=`cd ../../../../; pwd`/BUILD/dist
modules=$dist/share/cmake-3.5/Modules
cmake -DCMAKE_INSTALL_PREFIX:PATH=$dist \
    -DCMAKE_MODULE_PATH:PATH=$modules \
    -DCMAKE_BUILD_TYPE=Debug \
    -Das2js_compiler_COVERAGE:BOOL=ON \
    ../../..
cd ..
echo
echo "***"
echo "*** compile (`date`)"
echo "***"
VERBOSE=1 make -j 8 -C BUILD
echo
echo "***"
echo "*** run (`date`)"
echo "***"
# TODO add a test of the version here against the version in include/as2js/as2js.h.in
if test `BUILD/tests/test_as2js --version` != "$VERSION"
then
    echo "the version of test_as2js (`BUILD/tests/test_as2js --version`) is not equal to the project version ($VERSION)"
    exit 1;
fi
if $FULL
then
    # We test the pipe status on exit to detect whether the test failed
    echo "Start running the tests on `date`" >test_log.txt
    echo >>test_log.txt
    BUILD/tests/test_as2js 2>&1 | tee -a test_log.txt; test ${PIPESTATUS[0]} -eq 0
    echo >>test_log.txt
    BUILD/tests/test_as2js --destructive As2JsStreamUnitTests::test_stdout_destructive 2>&1 | tee -a test_log.txt; test ${PIPESTATUS[0]} -eq 0
    echo >>test_log.txt
    BUILD/tests/test_as2js As2JsRCUnitTests::test_empty_home 2>&1 | tee -a test_log.txt; test ${PIPESTATUS[0]} -eq 0
    echo >>test_log.txt
    echo "Finished running the tests on `date`" >>test_log.txt
else
    # "brief" test while working on a specific test
    if test "$1" == "--all"
    then
        BUILD/tests/test_as2js
    elif test "$1" == "--compiler"
    then
        BUILD/tests/test_as2js As2JsCompilerUnitTests
    elif test "$1" == "--db"
    then
        BUILD/tests/test_as2js As2JsDBUnitTests
    elif test "$1" == "--float64"
    then
        BUILD/tests/test_as2js As2JsFloat64UnitTests
    elif test "$1" == "--int64"
    then
        BUILD/tests/test_as2js As2JsInt64UnitTests
    elif test "$1" == "--json"
    then
        BUILD/tests/test_as2js As2JsJSONUnitTests
    elif test "$1" == "--lexer"
    then
        BUILD/tests/test_as2js As2JsLexerUnitTests
    elif test "$1" == "--message"
    then
        BUILD/tests/test_as2js As2JsMessageUnitTests
    elif test "$1" == "--node"
    then
        BUILD/tests/test_as2js As2JsNodeUnitTests
    elif test "$1" == "--optimizer"
    then
        BUILD/tests/test_as2js As2JsOptimizerUnitTests
    elif test "$1" == "--option"
    then
        BUILD/tests/test_as2js As2JsOptionsUnitTests
    elif test "$1" == "--parser"
    then
        BUILD/tests/test_as2js As2JsParserUnitTests
    elif test "$1" == "--position"
    then
        BUILD/tests/test_as2js As2JsPositionUnitTests
    elif test "$1" == "--rc"
    then
        BUILD/tests/test_as2js As2JsRCUnitTests
        BUILD/tests/test_as2js As2JsRCUnitTests::test_empty_home
    elif test "$1" == "--stream"
    then
        BUILD/tests/test_as2js As2JsStreamUnitTests
        BUILD/tests/test_as2js --destructive As2JsStreamUnitTests::test_stdout_destructive
    elif test "$1" == "--string"
    then
        BUILD/tests/test_as2js As2JsStringUnitTests
    elif test "$1" == "--version"
    then
        BUILD/tests/test_as2js As2JsVersionUnitTests
    elif test -z "$1"
    then
        # Do it all, but not published
        BUILD/tests/test_as2js
        BUILD/tests/test_as2js As2JsRCUnitTests::test_empty_home
        BUILD/tests/test_as2js --destructive As2JsStreamUnitTests::test_stdout_destructive
    else
        BUILD/tests/test_as2js $1
    fi
    # just in case, remove the log file if there is one
    rm -f test_log.txt
fi
echo
echo "***"
echo "*** gcov/lcov (`date`)"
echo "***"

# Choose one of the following gcov commands
mkdir -p gcov
cd gcov
gcov -o ../BUILD/src/CMakeFiles/as2js.dir/as2js.cpp.gcno ../../../src/as2js.cpp
cd ..


#lcov --capture --directory BUILD --output-file coverage.info
# The following lcov options can be used under Ubuntu 14.04+
# Use --no-external and --base-directory $SOURCE
# to avoid /usr/include and other unwanted files
# (only available in lcov version 1.10+)
lcov --capture --no-external --directory BUILD --base-directory $SOURCE --output-file coverage.info
mkdir -p html
genhtml --legend --demangle-cpp --no-branch-coverage --show-details coverage.info --output-directory html


end_date=`date`

# Statistics
echo "<html><head><title>as2js $VERSION statistics</title></head><body>" >html/statistics.html
echo "<h3>Statistics of the as2js $VERSION code</h3><pre>" >>html/statistics.html
cloc $SOURCE/include/ $SOURCE/lib/ $SOURCE/src/ >>html/statistics.html
echo "</pre><h3>Statistics of the as2js $VERSION tests</h3><pre>" >>html/statistics.html
cloc $SOURCE/tests/ >>html/statistics.html
echo "</pre><h3>Statistics of as2js scripts $VERSION</h3><pre>" >>html/statistics.html
cloc $SOURCE/scripts/ >>html/statistics.html
echo "</pre></body></html>" >>html/statistics.html

# Test output (Logs)
echo "<html><head><title>as2js $VERSION test logs</title></head><body><h3>Logs for the as2js $VERSION tests</h3><p>Tests started on $start_date and finished on $end_date</p><pre>" >html/test_log.html
if test -f test_log.txt
then
    # If test_log.txt does not exist, the user got the logs in the
    # console already
    cat test_log.txt >>html/test_log.html
fi
echo "</pre></body></html>" >>html/test_log.html


if test -f test_log.txt
then
    echo "***"
    echo "*** publication to lcov.as2js.org ($end_date)"
    echo "***"

    # For publication, if that directory does not exist, you probably don't
    # have a website to display this data
    if test -d /usr/clients/www/lcov.as2js.org/public_html
    then
            cp $SOURCE/dev/index.php /usr/clients/www/lcov.as2js.org/public_html/.
            mkdir -p /usr/clients/www/lcov.as2js.org/public_html/as2js-$VERSION
            cp -r html/* /usr/clients/www/lcov.as2js.org/public_html/as2js-$VERSION/.
            #cp html/statistics.html /usr/clients/www/lcov.as2js.org/public_html/as2js-$VERSION/.
    fi
fi

echo "Process started  on $start_date"
echo "Process finished on $end_date"

# vim: ts=4 sw=4 et
