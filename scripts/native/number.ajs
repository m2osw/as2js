// Copyright (c) 2005-2023  Made to Order Software Corp.  All Rights Reserved
//
// https://snapwebsites.org/project/as2js
// contact@m2osw.com
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

native package Native
{


class Number extends Object
{
    use extended_operators(2);

    function Number(var in value: Number := 0.0);

    function toString(var in base: Number := undefined) : String;
    unimplemented function toLocaleString(Void) : String;
    function valueOf(Void) : Number;
    function toFixed(var in fractionDigits: Number := undefined) : String;
    function toExponential(var in fractionDigits: Number := undefined) : String;
    function toPrecision(var in precision: Number := undefined) : String;

    // unary operators
    function +   (Void) : Number;
    function -   (Void) : Number;
    function ++  (Void) : Number; // pre
    function --  (Void) : Number; // pre
    function ++  (var in value: Number) : Number; // post
    function --  (var in value: Number) : Number; // post
    function ~   (Void) : Number;
    function !   (Void) : Boolean;

    // binary operator
    function **  (var in value: Number) : Number;

    function *   (var in value: Number) : Number;
    function /   (var in value: Number) : Number;
    function %   (var in value: Number) : Number;

    function +   (var in value: Number) : Number;
    function -   (var in value: Number) : Number;

    function <<  (var in value: Number) : Number;
    function >>  (var in value: Number) : Number;
    function >>> (var in value: Number) : Number;
    function <%  (var in value: Number) : Number;
    function >%  (var in value: Number) : Number;

    function <   (var in value: Number) : Boolean;
    function >   (var in value: Number) : Boolean;
    function <=  (var in value: Number) : Boolean;
    function >=  (var in value: Number) : Boolean;

    function ==  (var in value: Number) : Boolean;
    function !=  (var in value: Number) : Boolean;
    function === (var in value: Number) : Boolean;
    function !== (var in value: Number) : Boolean;
    function <=> (var in value: Number) : CompareResult;
    function â‰ˆ   (var in value: Number) : Boolean;
    function ~~  (var in value: Number) : Boolean;

    function &   (var in value: Number) : Number;

    function ^   (var in value: Number) : Number;

    function |   (var in value: Number) : Number;

    function <?  (var in value: Number) : Number;
    function >?  (var in value: Number) : Number;

    // assignment operators
    function :=  (var in value: Number) : Number;

    function **= (var in value: Number) : Number;

    function *=  (var in value: Number) : Number;
    function /=  (var in value: Number) : Number;
    function %=  (var in value: Number) : Number;

    function +=  (var in value: Number) : Number;
    function -=  (var in value: Number) : Number;

    function <<= (var in value: Number) : Number;
    function >>= (var in value: Number) : Number;
    function >>>=(var in value: Number) : Number;
    function <%= (var in value: Number) : Number;
    function >%= (var in value: Number) : Number;

    function &=  (var in value: Number) : Number;

    function ^=  (var in value: Number) : Number;

    function |=  (var in value: Number) : Number;

    function <?= (var in value: Number) : Number;
    function >?= (var in value: Number) : Number;

    // constants
    const var MIN_VALUE: Number;
    const var MAX_VALUE: Number;
    //const var NaN; -- NaN is 100% internal in as2js
    const var NEGATIVE_INFINITY: Number;
    const var POSITIVE_INFINITY: Number;
    const var EPSILON: Number;
};


// extension
class Integer extends Number
{
    function Integer(var in value: Number := 0.0) : Void;

    // operators that return a Number have to be overloaded to return
    // an Integer otherwise we get the wrong type in operations
    //
    function +   (Void) : Integer;
    function -   (Void) : Integer;
    function ++  (Void) : Integer; // pre
    function --  (Void) : Integer; // pre
    function ++  (var in value: Number) : Integer; // post
    function --  (var in value: Number) : Integer; // post
    function ~   (Void) : Integer;
    function **  (var in value: Integer) : Integer;
    function *   (var in value: Integer) : Integer;
    function /   (var in value: Integer) : Integer;
    function %   (var in value: Integer) : Integer;
    function +   (var in value: Integer) : Integer;
    function -   (var in value: Integer) : Integer;
    function <<  (var in value: Number) : Integer;
    function >>  (var in value: Number) : Integer;
    function >>> (var in value: Number) : Integer;
    function <%  (var in value: Number) : Integer;
    function >%  (var in value: Number) : Integer;
    function &   (var in value: Integer) : Integer;
    function ^   (var in value: Integer) : Integer;
    function |   (var in value: Integer) : Integer;
    function <?  (var in value: Integer) : Integer;
    function >?  (var in value: Integer) : Integer;
    function :=  (var in value: Integer) : Integer;
    function **= (var in value: Integer) : Integer;
    function *=  (var in value: Integer) : Integer;
    function /=  (var in value: Integer) : Integer;
    function %=  (var in value: Integer) : Integer;
    function +=  (var in value: Integer) : Integer;
    function -=  (var in value: Integer) : Integer;
    function <<= (var in value: Number) : Integer;
    function >>= (var in value: Number) : Integer;
    function >>>=(var in value: Number) : Integer;
    function <%= (var in value: Number) : Integer;
    function >%= (var in value: Number) : Integer;
    function &=  (var in value: Integer) : Integer;
    function ^=  (var in value: Integer) : Integer;
    function |=  (var in value: Integer) : Integer;
    function <?= (var in value: Integer) : Integer;
    function >?= (var in value: Integer) : Integer;

    // constants
    const var MIN_VALUE: Integer;
    const var MAX_VALUE: Integer;
};


// extension
class Double extends Number
{
    function Double(var in value: Number := 0.0) : Void;

    // operators that return a Number have to be overloaded to return
    // a Double otherwise we get the wrong type in operations
    //
    function +   (Void) : Double;
    function -   (Void) : Double;
    function ++  (Void) : Double; // pre
    function --  (Void) : Double; // pre
    function ++  (var in value: Number) : Double; // post
    function --  (var in value: Number) : Double; // post
    function ~   (Void) : Double;
    function **  (var in value: Double) : Double;
    function *   (var in value: Double) : Double;
    function /   (var in value: Double) : Double;
    function %   (var in value: Double) : Double;
    function +   (var in value: Double) : Double;
    function -   (var in value: Double) : Double;
    function <<  (var in value: Number) : Double;
    function >>  (var in value: Number) : Double;
    function >>> (var in value: Number) : Double;
    function <%  (var in value: Number) : Double;
    function >%  (var in value: Number) : Double;
    function &   (var in value: Double) : Double;
    function ^   (var in value: Double) : Double;
    function |   (var in value: Double) : Double;
    function <?  (var in value: Double) : Double;
    function >?  (var in value: Double) : Double;
    function :=  (var in value: Double) : Double;
    function **= (var in value: Double) : Double;
    function *=  (var in value: Double) : Double;
    function /=  (var in value: Double) : Double;
    function %=  (var in value: Double) : Double;
    function +=  (var in value: Double) : Double;
    function -=  (var in value: Double) : Double;
    function <<= (var in value: Number) : Double;
    function >>= (var in value: Number) : Double;
    function >>>=(var in value: Number) : Double;
    function <%= (var in value: Number) : Double;
    function >%= (var in value: Number) : Double;
    function &=  (var in value: Double) : Double;
    function ^=  (var in value: Double) : Double;
    function |=  (var in value: Double) : Double;
    function <?= (var in value: Double) : Double;
    function >?= (var in value: Double) : Double;
};


}

// vim: ts=4 sw=4 et
