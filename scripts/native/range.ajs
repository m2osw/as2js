// Copyright (c) 2023  Made to Order Software Corp.  All Rights Reserved
//
// https://snapwebsites.org/project/as2js
// contact@m2osw.com
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

native package Native
{


class Range extends Object
{
    use extended_operators(2);

    function Range(var in from: Number := 0, var in to: Number := 0);

    function toString(Void) : String;
    function valueOf(Void) : Range;

    // binary operator
    function &   (var in value: Range) : Range;
    function |   (var in value: Range) : Range;

    function in  (var in value: Range) : Boolean;

    function <   (var in value: Range) : Boolean;
    function >   (var in value: Range) : Boolean;
    function <=  (var in value: Range) : Boolean;
    function >=  (var in value: Range) : Boolean;

    function ==  (var in value: Range) : Boolean;
    function !=  (var in value: Range) : Boolean;
    function === (var in value: Range) : Boolean;
    function !== (var in value: Range) : Boolean;
    function <=> (var in value: Range) : CompareResult;

    function <?  (var in value: Range) : Range;
    function >?  (var in value: Range) : Range;

    // assignment operators
    function :=  (var in value: Range) : Range;

    function &=  (var in value: Range) : Range;
    function |=  (var in value: Range) : Range;

    function <?= (var in value: Range) : Range;
    function >?= (var in value: Range) : Range;

    var length: Number;
};


}

// vim: ts=4 sw=4 et
