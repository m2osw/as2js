// Copyright (c) 2005-2024  Made to Order Software Corp.  All Rights Reserved
//
// https://snapwebsites.org/project/as2js
// contact@m2osw.com
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

native package Native
{


class Array extends Object
{
    function Array(Void) : Void;
    function Array(var in value: Array) : Void;
    function Array(var in len: Number) : Void;
    function Array(var in ... items: Object) : Void;

    static function from(var in items: Array, var in mapfn: function(var in value: Object, var in index: Number) : Object, var in thisArg: Object := undefined) : Array;
    static function isArray(var in arg: Object) : Boolean;
    static function of(var in ... items : Object) : Array;

    function toLocaleString(Void) : String;
    function toString(Void) : String;

    //
    // Note: all the following functions are marked as
    //       "is intentionally generic; 'this' does not need to be an Array"
    //       at this time, we keep this here and force our users to convert
    //       their object to an Array first
    //
    function at(var in index: Number) : Object;
    function concat(var in ... items: Object) : Object;
    function copyWithin(var in target: Array, var in start: Number, var in end: Number := undefined) : Array;
    //function entries() : ArrayIterator; -- TBD?
    function every(var in callbackfn: function(var in element: Object, var in index: Number, var in obj: Array) : Boolean, var in thisArg: Object := undefined) : Boolean;
    function fill(var in value: Object, var in start: Number, var in end: Number);
    function filter(var in callbackfn: function(var in element: Object, var in index: Number, var in obj: Array) : Boolean, var in thisArg: Object := undefined) : Array;
    function find(var in predicate: function(var in thisArg, var in value: Object, var in index: Number) : Boolean, var in thisArg: Object) : Object;
    function findIndex(var in predicate: function(var in thisArg, var in value: Object, var in index: Number) : Boolean, var in thisArg: Object) : Number;
    function flat(var in depth: Number := undefined) : Array;
    function flatMap(var in mapperFunction: function(var in thisArg: Object, var in element: Object, var in sourceIndex: Number, var in source: Array) : Object, var in thisArg: Object := undefined) : Array;
    function forEach(var in callbackfn: function(var in element: Object, var in index: Number, var in obj: Array) : Boolean, var in thisArg: Object := undefined) : Void;
    function includes(var in searchElement: Object, var in fromIndex: Number := 0) : Boolean;
    function indexOf(var in searchElement: Object, var in fromIndex: Number := 0) : Number;
    function join(var in separator: String) : String;
    function keys(Void) : Array;
    function lastIndexOf(var in searchElement: Object, var in fromIndex: Number := undefined) : Number;
    function map(var in callbackfn: function(var in thisArg: Object, var in element: Object, var in index: Number, var in obj: Array) : Boolean, var in thisArg: Object := undefined) : Array;
    function pop(Void) : Object;
    function push(var in ... items: Object) : Number;
    function reduce(var in callbackfn: function(var in previousValue: Object, var in currentValue: Object, var in currentIndex: Number, var in obj: Array) : Void, initialValue: Object := undefined) : Object;
    function reduceRight(var in callbackfn: function(var in previousValue: Object, var in currentValue: Object, var in currentIndex: Number, var in obj: Array) : Void, initialValue: Object := undefined) : Object;
    function reverse(Void) : Array;
    function shift(Void) : Object;
    function slice(var in start: Number, var in end: Number) : Array;
    function some(var in callbackfn: function(var in element: Object, var in index: Number, var in obj: Array) : Boolean, var in thisArg: Object := undefined) : Boolean;
    function sort(var in comparefn: function(var in x: Object, var in y: Object) : CompareResult := undefined) : Array;
    function splice(var in start: Number, var in deleteCount: Number, var in ... items: Object) : Array;
    function unshift(var in ... items: Object) : Number;
    //function values() : ArrayIterator; -- TBD?

    var length: Number;
};


}

// vim: ts=4 sw=4 et
