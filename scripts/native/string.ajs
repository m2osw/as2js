// Copyright (c) 2005-2023  Made to Order Software Corp.  All Rights Reserved
//
// https://snapwebsites.org/project/as2js
// contact@m2osw.com
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

native package Native
{


class String extends Object
{
    use extended_operators(2);

    function String(var in value: String := 0.0);

    static function fromCharCode(var in ... chars: Number) : String;

    function toString(Void) : String;
    function valueOf(Void) : String;

    //
    // Note: all the following functions are marked as
    //       "is intentionally generic; 'this' does not need to be an Array"
    //       at this time, we keep this here and force our users to convert
    //       their object to a String first
    //
    function charAt(var in value: Number) : String;
    function charCodeAt(var in value: Number) : Number;
    function contact(var in ... value: String) : String;
    function indexOf(var in searchString: String, var in position: Number) : Number;
    function lastIndexOf(var in searchString: String, var in position: Number) : Number;
    function localeCompare(var in that: String) : Number;
    function match(var in regexp: String) : Boolean;
    function match(var in regexp: RegExp) : Boolean;
    function replace(var in searchValue: String, var in replaceValue: String) : String;
    function replace(var in searchValue: RegExp, var in replaceValue: String) : String;
    function search(var in regexp: String) : Number;
    function search(var in regexp: RegExp) : Number;
    function slice(var in start: Number, var in end: Number) : String;
    function split(var in separator: String, var in limit: Number) : Array;
    function split(var in separator: RegExp, var in limit: Number) : Array;
    function substring(var in start: Number, var in end: Number) : String;
    function toLowerCase(Void) : String;
    function toLocaleLowerCase(Void) : String;
    function toUpperCase(Void) : String;
    function toLocaleUpperCase(Void) : String;
    function trim(Void) : String;

    // unary operators
    function !   (Void) : Boolean;
    function +   (Void) : String;

    // binary operator
    function ~=  (var in value: RegExp) : Boolean;
    function ~!  (var in value: RegExp) : Boolean;

    function *   (var in value: Number) : String;

    function +   (var in value: String) : String;
    function -   (var in value: String) : String;

    function <%  (var in value: Number) : String;
    function >%  (var in value: Number) : String;

    function <   (var in value: String) : Boolean;
    function >   (var in value: String) : Boolean;
    function <=  (var in value: String) : Boolean;
    function >=  (var in value: String) : Boolean;

    function ==  (var in value: String) : Boolean;
    function !=  (var in value: String) : Boolean;
    function === (var in value: String) : Boolean;
    function !== (var in value: String) : Boolean;
    function <=> (var in value: String) : CompareResult;
    function ~~  (var in value: String) : Boolean;

    function &   (var in value: String) : String
    {
        return this + value;
    }

    function <?  (var in value: String) : String;
    function >?  (var in value: String) : String;

    // assignment operators
    function :=  (var in value: String) : String;

    function *=  (var in value: Number) : String;

    function +=  (var in value: String) : String;

    function <%= (var in value: Number) : String;
    function >%= (var in value: Number) : String;

    function &=  (var in value: String) : String
    {
        return this += value;
    }

    function <?= (var in value: String) : String;
    function >?= (var in value: String) : String;

    // other operators
    function [] (var in value: Number) : String;

    var length: Number;
};


}

// vim: ts=4 sw=4 et
