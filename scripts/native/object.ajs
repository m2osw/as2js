// Copyright (c) 2005-2024  Made to Order Software Corp.  All Rights Reserved
//
// https://snapwebsites.org/project/as2js
// contact@m2osw.com
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

native package Native
{


// TBD: what would be the best place to define such things?
enum CompareResult
{
    LESS := -1,
    EQUAL := 0,
    GREATER := 1
};


class Object
{
    function Object(Void);
    function Object(var in value: Object);

    static function getPrototypeOf(var in O: Object) : Object;
    static function getOwnPropertyDescriptor(var in O: Object, var in P: String) : Object;
    static function getOwnPropertyNames(var in O: Object) : Array;
    static function create(var in O: Object, var in ... Properties) : Object;
    static function defineProperty(var in O: Object, var in P: String, var in Attributes: Object) : Object;
    static function defineProperties(var in O: Object, var in Properties: Object) : Object;
    static function seal(var in O: Object) : Object;
    static function entries(var in O: Object) : Array;
    static function freeze(var in O: Object) : Object;
    static function preventExtensions(var in O: Object) : Object;
    static function isSealed(var in O: Object) : Boolean;
    static function isFrozen(var in O: Object) : Boolean;
    static function isExtensible(var in O: Object) : Boolean;
    static function keys(var in O: Object) : Array;

    function toString(Void) : String;
    function toLocaleString(Void) : String;
    function valueOf(Void) : String;
    function hasOwnProperty(var in V: String) : Boolean;
    function isPrototypeOf(var in V: Object) : Boolean;
    function propertyIsEnumerable(var in V: String) : Object;

    function [] (var in index: Object) : Object;

    var length: Number;
};


}

// vim: ts=4 sw=4 et
