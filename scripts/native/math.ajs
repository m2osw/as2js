// Copyright (c) 2005-2023  Made to Order Software Corp.  All Rights Reserved
//
// https://snapwebsites.org/project/as2js
// contact@m2osw.com
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

native package Native
{


class Math extends Object
{
    // the Math object cannot be instantiated
    private function Math(var in m: Math := undefined) : Void;

    static function abs(var in x: Number) : Number;
    static function acos(var in x: Number) : Number;
    static function acosh(var in x: Number) : Number;
    static function asin(var in x: Number) : Number;
    static function asinh(var in x: Number) : Number;
    static function atan(var in x: Number) : Number;
    static function atanh(var in x: Number) : Number;
    static function atan2(var in y: Number, var in x: Number) : Number;
    static function cbrt(var in x: Number) : Number;
    static function ceil(var in x: Number) : Number;
    static function clz32(var in x: Number) : Number;
    static function cos(var in x: Number) : Number;
    static function cosh(var in x: Number) : Number;
    static function exp(var in x: Number) : Number;
    static function expm1(var in x: Number) : Number;
    static function floor(var in x: Number) : Number;
    static function fround(var in x: Number) : Number;
    static function hypot(var in ... x: Number) : Number;
    static function imul(var in x: Number, var in y: Number) : Number;
    static function log(var in x: Number) : Number;
    static function log1p(var in x: Number) : Number;
    static function log10(var in x: Number) : Number;
    static function log2(var in x: Number) : Number;
    static function max(var in ... x: Number) : Number;
    static function min(var in ... x: Number) : Number;
    static function pow(var in base: Number, var in exponent: Number) : Number;
    static function random() : Number;
    static function round(var in x: Number) : Number;
    static function sin(var in x: Number) : Number;
    static function sinh(var in x: Number) : Number;
    static function sqrt(var in x: Number) : Number;
    static function tan(var in x: Number) : Number;
    static function tanh(var in x: Number) : Number;
    static function trunc(var in x: Number) : Number;

    const var E := 2.718281828459045235360287471352662498;
    const var LN10 := 2.302585092994045684017991454684364208;
    const var LN2 := 0.693147180559945309417232121458176568;
    const var LOG2E := 1.442695040888963407359924681001892137;
    const var LOG10E := 0.434294481903251827651128918916605082;
    const var PI := 3.141592653589793238462643383279502884;
    const var SQRT1_2 := 0.707106781186547524400844362104849039;
    const var SQRT2 := 1.414213562373095048801688724209698079;
};


}

// vim: ts=4 sw=4 et
